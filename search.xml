<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[漏洞分析-CVE-2019-12922_phpMyAdmin小于等于4.9.0.1CSRF漏洞分析]]></title>
    <url>%2F2019%2F09%2F27%2F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-CVE-2019-12922-phpMyAdmin%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E4-9-0-1CSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-1%2F</url>
    <content type="text"><![CDATA[最近安全圈曝光了很多漏洞，之前审计了泛微 OARCE 漏洞,今天审计分析phpMyAdmin_CSRF漏洞 #事件背景 2019年9月16日，网络上曝光phpMyAdmin4.9.0.1版本中存在跨站请求伪造漏洞，攻击者可利用该漏洞通过受影响客户端向服务器发送非预期的请求。这个漏洞影响phpMyAdmin的版本最高到4.9.0.1，这是phpMyAdmin目前最新的发行版本。因为这个漏洞危及的范围比较小，仅允许攻击者删除目标服务器里的，phpMyAdmin控制面板中关于setup页面中的服务器配置。攻击者所需要做的仅仅是发送一个精心设计的URL给网页的管理员，这个管理员需要在他的浏览器登录到phpMyAdmin控制面板，然后在同一个浏览器点击这个URL，就会不知不觉地删除了配置里的服务器。 #漏洞信息 漏洞名称 phpMyAdmin_CSRF漏洞 CVE编号 CVE-2019-12922 CNVD编号 CNVD-2019-31657 影响版本 phpMyAdmin &lt;=4.9.0.1（据说phpMyAdmin 5.0.0-alpha1版也存在） 威胁等级 中危 公开时间 2019年9月16日 #漏洞分析 1.什么是CSRF？ CSRF(Cross-site request forgery)跨站请求伪造，也被称为One ClickAttack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。 上图为CSRF攻击的一个简单模型：用户访问恶意网站B，恶意网站B返回给用户的HTTP信息中要求用户访问网站A，而由于用户和网站A之间可能已经有信任关系导致这个请求就像用户真实发送的一样会被执行。 2.静态审计 漏洞存在于phpmyadmin/setup/index.php文件，该文件为安装phpmyadmin的脚本，可以在此脚本中创建连接新的Mysql数据库服务器 允许get请求参数为page， 再跟进到/setup/frames/$page.inc.php 也就是 /setup/frames/server.inc.php文件 这个php从Get请求获取了 mode和id这两个参数的值， mode有三种（’edit’、’remove’、’revert’） 当mode=remove且Servers/$id不为null时，使用removeServer方法删除server然后Location跳转到/phpmyadmin/setup/index.php首页 我们再跟进看下phpMyAdmin/libraries/config/ConfigFile.class.php的removeServer方法 unset这句是关键 unset函数是销毁指定变量，在这里就是删掉$server ```unset($_SESSION[$this-&gt;id][‘Servers’][$last_server]);``` 导致CSRF的根据原因为phpmyamdin，没有全局token，只有在登录/phpmyadmin/index.php后，才会创建token 所以在设置服务器页面phpmyadmin/setup/index.php是没有token的，故此无法防御跨站请求伪造攻击，这样$server就通过CSRF漏洞被删除了。 但是这个漏洞不能执行Sql语句拖库，故此危害等级不高，但是利用起来很简单，攻击者只需要知道服务器的URL，就能利用CSRF漏洞删除phpmyamdi配置中的服务器。 #漏洞复现 在浏览器打开 http://192.168.21.56/phpmyadmin/setup/index.php 为了方便后面CSRF漏洞能够成功删除服务器成功先New一个服务器 点击New server就跳转到服务器创建页面 save之后跳转到之前setup/index.php页面 可以看到这里Delete按钮就是 Poc中的地址，点击这个delete就能删除这个server 开始复现CSRF漏洞，构造Poc，新建一个CSRF.html文件写入以下代码 123&lt;p&gt;Deleting Server 1&lt;/p&gt;&lt;img src=&quot;http://192.168.31.56/phpmyadmin/setup/index.php?page=servers&amp;mode=remove&amp;id=1&quot;;style=&quot;display:none;&quot;/&gt; 在同一个浏览器中执行 通过抓包设置断点可以看到该请求 该请求删除了id为1的server 再返回/setup/index.php 查看发现之前新建的 id为1 ，name为11111的server被删除 本次分析复现的代码及POC会在本人的Github上分享https://github.com/securitycn/ #修复建议 厂商尚未提供漏洞修复方案，请关注厂商主页更新： https://www.phpmyadmin.net/ #免责声明 本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。 #版权 本文为作者原创禁止一切非授权转载和抄袭行为，如需转载请联系在公众号后台留言（留言请说明来意），转载请注明出处及下方二维码。 #求关注 欢迎大家留言，喜欢文章的朋友可以关注本公众号 微信公众号：securitycn 博客：https://securitycn.github.io Github: https://github.com/securitycn]]></content>
  </entry>
  <entry>
    <title><![CDATA[泛微OA E-cology 远程代码执行漏洞分析、过滤器绕过及批量检测工具]]></title>
    <url>%2F2019%2F09%2F24%2F%E6%B3%9B%E5%BE%AEOA-E-cology-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E7%BB%95%E8%BF%87%E5%8F%8A%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[【漏洞分析】泛微OA E-cology 远程代码执行漏洞原理分析、过滤器绕过及批量检测工具 Author:Ja0k 最近曝光了很多漏洞，后续将对这些有代表性的漏洞进行分析审分析，今天有空先审计分析 泛微OA RCE 漏洞 #事件背景 2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁，泛微e-cology OA系统的JAVABeanshell接口可被未授权访问，攻击者调用该Beanshell接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行，漏洞等级严重。 #漏洞信息 漏洞名称 泛微OA E-cology 远程代码执行漏洞 CVE编号 - CNVD编号 CNVD-2019-32204 影响版本 e-cology &lt;=9.0 威胁等级 高危 公开时间 2019年9月17日 #漏洞分析 此次存在漏洞的是JAVA Beanshell接口，现在了解下Beanshell的基础。 1. BeanShell 知识（来源：https://github.com/beanshell/beanshell） BeanShell是一个小型的，免费的，可嵌入的Java源解释器，具有使用Java编写的对象脚本语言功能。BeanShell动态执行标准Java语法，并通过通用的脚本编写便利进行扩展，例如松散的类型，命令和方法闭包（如Perl和JavaScript）。 可以交互地使用BeanShell进行Java实验和调试，以及以新方式扩展应用程序。 Beanshell可以执行print、dir、eval、exec等命令 页面如下图 2. 泛微中Beanshell库jar代码静态分析 从泛微里提取存在漏洞的lib文件 bsh-2.0b4.jar 反编译查看servlet.BshServlet这个类 在类中发现doGet和doPost方法，用来接收并执行提交的数据。 doPost实际上就是对doGet的二次封装 在doGet方法中看到调用evalScript方法创建一个名为obj的对象，再看evalScript这个方法中的pramString参数，最终会被interpreter.eval处理。如下图 跟进 bsh.Interpreter类的eval方法 跳转到bsh.classpath/ClassManagerImpl.class类 该类调用了bsh.commands/exec.bsh脚本，该脚本可以执行命令 #漏洞复现 泛微OA BeanShell复现测试 把print(“hello!”)换成exec(“whoami”)，就可以测试能否执行系统命令了。 Poc1: bsh.script=\u0065\u0078\u0065\u0063(“whoami”);&amp;bsh.servlet.output=raw 如果有全局过滤器过滤了exec或eval，会有报错，如下图： 可以采用unicode编码、字符串拼接等方式绕过,见下图： Poc2: bsh.script=\u0065\u0078\u0065\u0063(“whoami”);&amp;bsh.servlet.output=raw Poc3： bsh.script=eval%00(“ex”%2b”ec(bsh.httpServletRequest.getParameter(\“command\“))”);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw&amp;command=whoami 2. 批量验证脚本 该脚本拼接了常用的泛微OA web路径，结合了本文讲解绕过过滤器的3个Poc 该工具仅用于测试研究使用请勿他用。 3.本文用到的文件下载地址 泛微OA中提取的Beanshell库： https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/bsh-2.0b4.jar 批量脚本： https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/Weaver-Ecology-OA_RCE-EXP.py #免责声明 本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>漏洞分析</tag>
        <tag>代码审计</tag>
      </tags>
  </entry>
</search>
